var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
import { Semaphore } from '../utils/Semaphore';
/**
 * Module for scheduling and optimization of translate a text streams
 *
 * - It can union many translate requests to one
 * - You can group any requests by context
 * - It's configurable. You can set retry limit and edge for direct translate
 */
var Scheduler = /** @class */ (function () {
    function Scheduler(translator, config) {
        var _this = this;
        this.config = {
            translateRetryAttemptLimit: 2,
            isAllowDirectTranslateBadChunks: true,
            directTranslateLength: null,
            translatePoolDelay: 300,
            chunkSizeForInstantTranslate: null,
            taskBatchHandleDelay: null,
        };
        this.contextCounter = 0;
        this.taskContainersStorage = new Set();
        this.timersMap = new Map();
        /**
         * Tasks queue with items sorted by priority
         * It must be handled from end to start
         */
        this.translateQueue = [];
        /**
         * Return first item from queue and delete it from queue
         * Items is sorted by priority
         */
        this.getItemFromTranslateQueue = function () {
            var _a;
            return {
                done: _this.translateQueue.length === 0,
                value: (_a = _this.translateQueue.pop()) !== null && _a !== void 0 ? _a : null,
            };
        };
        this.workerState = false;
        this.translator = translator;
        if (config !== undefined) {
            for (var key in config) {
                this.config[key] = config[key];
            }
        }
        this.semafor = new Semaphore({ timeout: translator.getRequestsTimeout() });
    }
    Scheduler.prototype.translate = function (text, from, to, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, context, _c, priority, _d, directTranslateForThisRequest;
            return __generator(this, function (_e) {
                _a = options !== undefined ? options : {}, _b = _a.context, context = _b === void 0 ? '' : _b, _c = _a.priority, priority = _c === void 0 ? 0 : _c, _d = _a.directTranslate, directTranslateForThisRequest = _d === void 0 ? false : _d;
                if (this.translator.checkLimitExceeding(text) <= 0) {
                    // Direct translate
                    if (directTranslateForThisRequest ||
                        (this.config.directTranslateLength !== null &&
                            text.length >= this.config.directTranslateLength)) {
                        return [2 /*return*/, this.directTranslate(text, from, to)];
                    }
                    else {
                        return [2 /*return*/, this.makeTask({ text: text, from: from, to: to, context: context, priority: priority })];
                    }
                }
                else {
                    // Split text by words and translate
                    return [2 /*return*/, this.splitAndTranslate(text, from, to, context, priority)];
                }
                return [2 /*return*/];
            });
        });
    };
    Scheduler.prototype.directTranslate = function (text, from, to) {
        return __awaiter(this, void 0, void 0, function () {
            var free;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.semafor.take()];
                    case 1:
                        free = _a.sent();
                        return [2 /*return*/, this.translator.translate(text, from, to).finally(free)];
                }
            });
        });
    };
    Scheduler.prototype.splitAndTranslate = function (text, from, to, context, priority) {
        var e_1, _a;
        var _this = this;
        var splittedText = [];
        var charsetIndexes = [];
        var wordsBuffer = '';
        try {
            for (var _b = __values(text.matchAll(/([^\s]+)(\s*)/g)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var textMatch = _c.value;
                var newPart = textMatch[0];
                var newBuffer = wordsBuffer + newPart;
                // Add word to buffer if can
                if (this.translator.checkLimitExceeding(newBuffer) <= 0) {
                    wordsBuffer = newBuffer;
                    continue;
                }
                // Write and clear buffer if not empthy
                if (wordsBuffer.length > 0) {
                    splittedText.push(wordsBuffer);
                    wordsBuffer = '';
                }
                // Handle new part
                if (this.translator.checkLimitExceeding(newPart) <= 0) {
                    // Add to buffer
                    wordsBuffer += newPart;
                    continue;
                }
                else {
                    // Slice by chars
                    var charsBuffer = newPart;
                    while (charsBuffer.length > 0) {
                        var extraChars = this.translator.checkLimitExceeding(charsBuffer);
                        if (extraChars > 0) {
                            var offset = charsBuffer.length - extraChars;
                            // Write slice and remainder
                            splittedText.push(charsBuffer.slice(0, offset));
                            charsBuffer = charsBuffer.slice(offset);
                            charsetIndexes.push(splittedText.length - 1);
                        }
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var ctxPrefix = context.length > 0 ? context + ';' : '';
        return Promise.all(splittedText.map(function (text, index) {
            return charsetIndexes.indexOf(index) !== -1
                ? text
                : _this.makeTask({
                    text: text,
                    from: from,
                    to: to,
                    context: ctxPrefix + "text#".concat(_this.contextCounter++),
                    priority: priority,
                });
        })).then(function (translatedParts) { return translatedParts.join(''); });
    };
    Scheduler.prototype.makeTask = function (_a) {
        var _this = this;
        var text = _a.text, from = _a.from, to = _a.to, priority = _a.priority, _b = _a.context, context = _b === void 0 ? '' : _b;
        return new Promise(function (resolve, reject) {
            _this.addToTaskContainer({
                text: text,
                from: from,
                to: to,
                context: context,
                priority: priority,
                resolve: resolve,
                reject: reject,
            });
        });
    };
    Scheduler.prototype.addToTaskContainer = function (params) {
        var e_2, _a;
        var text = params.text, from = params.from, to = params.to, _b = params.attempt, attempt = _b === void 0 ? 0 : _b, _c = params.context, context = _c === void 0 ? '' : _c, priority = params.priority, resolve = params.resolve, reject = params.reject;
        // create task
        var task = {
            text: text,
            from: from,
            to: to,
            attempt: attempt,
            resolve: resolve,
            reject: reject,
        };
        var container = null;
        var _loop_1 = function (taskContainer) {
            // Skip containers with not equal parameters
            if (['from', 'to', 'context', 'priority'].some(function (key) { return params[key] !== taskContainer[key]; }))
                return "continue";
            // Lightweight check to overflow
            // NOTE: Do strict check here if you need comply a limit contract
            if (this_1.translator.getLengthLimit() >=
                taskContainer.length + task.text.length) {
                taskContainer.tasks.push(task);
                taskContainer.length += task.text.length;
                container = taskContainer;
            }
        };
        var this_1 = this;
        try {
            // try add to exists container
            for (var _d = __values(this.taskContainersStorage), _e = _d.next(); !_e.done; _e = _d.next()) {
                var taskContainer = _e.value;
                _loop_1(taskContainer);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
            }
            finally { if (e_2) throw e_2.error; }
        }
        // make container
        if (container === null) {
            var newTaskContainer = {
                context: context,
                priority: priority,
                from: from,
                to: to,
                tasks: [task],
                length: task.text.length,
            };
            this.taskContainersStorage.add(newTaskContainer);
            container = newTaskContainer;
        }
        if (this.config.chunkSizeForInstantTranslate !== null &&
            container.length >= this.config.chunkSizeForInstantTranslate) {
            this.addToTranslateQueue(container);
        }
        else {
            this.updateDelayForAddToTranslateQueue(container);
        }
    };
    Scheduler.prototype.updateDelayForAddToTranslateQueue = function (taskContainer) {
        var _this = this;
        // Flush timer
        if (this.timersMap.has(taskContainer)) {
            // Due to expectation run on one platform, timer objects will same always
            globalThis.clearTimeout(this.timersMap.get(taskContainer));
        }
        this.timersMap.set(taskContainer, globalThis.setTimeout(function () {
            _this.addToTranslateQueue(taskContainer);
        }, this.config.translatePoolDelay));
    };
    Scheduler.prototype.addToTranslateQueue = function (taskContainer) {
        // Flush timer
        if (this.timersMap.has(taskContainer)) {
            // Due to expectation run on one platform, timer objects will same always
            globalThis.clearTimeout(this.timersMap.get(taskContainer));
            this.timersMap.delete(taskContainer);
        }
        this.taskContainersStorage.delete(taskContainer);
        // Resort queue by priority each time to keep consistency
        this.translateQueue = this.translateQueue
            .concat(taskContainer)
            .sort(function (a, b) { return a.priority - b.priority; });
        if (!this.workerState) {
            this.runWorker();
        }
    };
    Scheduler.prototype.runWorker = function () {
        return __awaiter(this, void 0, void 0, function () {
            var firstIteration, _loop_2, this_2, state_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.workerState = true;
                        firstIteration = true;
                        _loop_2 = function () {
                            var workerHandleDelay, iterate, taskContainer, free, textArray;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        workerHandleDelay = this_2.config.taskBatchHandleDelay;
                                        if (!(workerHandleDelay && firstIteration)) return [3 /*break*/, 2];
                                        return [4 /*yield*/, new Promise(function (res) { return setTimeout(res, workerHandleDelay); })];
                                    case 1:
                                        _b.sent();
                                        _b.label = 2;
                                    case 2:
                                        firstIteration = false;
                                        iterate = this_2.getItemFromTranslateQueue();
                                        // Skip when queue empty
                                        if (iterate.done || iterate.value === null)
                                            return [2 /*return*/, "break"];
                                        taskContainer = iterate.value;
                                        return [4 /*yield*/, this_2.semafor.take()];
                                    case 3:
                                        free = _b.sent();
                                        textArray = taskContainer.tasks.map(function (i) { return i.text; });
                                        return [4 /*yield*/, this_2.translator
                                                .translateBatch(textArray, taskContainer.from, taskContainer.to)
                                                .then(function (result) {
                                                for (var index in taskContainer.tasks) {
                                                    var task = taskContainer.tasks[index];
                                                    var translatedText = result[index];
                                                    if (translatedText !== null) {
                                                        task.resolve(translatedText);
                                                    }
                                                    else {
                                                        _this.taskErrorHandler(task, new Error("Translator module can't translate this"), taskContainer.context, taskContainer.priority);
                                                    }
                                                }
                                            })
                                                .catch(function (reason) {
                                                var e_3, _a;
                                                console.error(reason);
                                                try {
                                                    for (var _b = (e_3 = void 0, __values(taskContainer.tasks)), _c = _b.next(); !_c.done; _c = _b.next()) {
                                                        var task = _c.value;
                                                        _this.taskErrorHandler(task, reason, taskContainer.context, taskContainer.priority);
                                                    }
                                                }
                                                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                                                finally {
                                                    try {
                                                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                                                    }
                                                    finally { if (e_3) throw e_3.error; }
                                                }
                                            })
                                                .finally(free)];
                                    case 4:
                                        _b.sent();
                                        return [2 /*return*/];
                                }
                            });
                        };
                        this_2 = this;
                        _a.label = 1;
                    case 1:
                        if (!true) return [3 /*break*/, 3];
                        return [5 /*yield**/, _loop_2()];
                    case 2:
                        state_1 = _a.sent();
                        if (state_1 === "break")
                            return [3 /*break*/, 3];
                        return [3 /*break*/, 1];
                    case 3:
                        this.workerState = false;
                        return [2 /*return*/];
                }
            });
        });
    };
    Scheduler.prototype.taskErrorHandler = function (task, error, context, priority) {
        if (task.attempt >= this.config.translateRetryAttemptLimit) {
            if (this.config.isAllowDirectTranslateBadChunks) {
                var text = task.text, from = task.from, to = task.to, resolve = task.resolve, reject = task.reject;
                this.directTranslate(text, from, to).then(resolve, reject);
            }
            else {
                task.reject(error);
            }
        }
        else {
            this.addToTaskContainer(__assign(__assign({}, task), { attempt: task.attempt + 1, context: context, priority: priority }));
        }
    };
    return Scheduler;
}());
export { Scheduler };

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjaGVkdWxpbmcvU2NoZWR1bGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFNQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUEyRy9DOzs7Ozs7R0FNRztBQUNIO0lBWUMsbUJBQVksVUFBcUMsRUFBRSxNQUF3QjtRQUEzRSxpQkFVQztRQW5CZ0IsV0FBTSxHQUE4QjtZQUNwRCwwQkFBMEIsRUFBRSxDQUFDO1lBQzdCLCtCQUErQixFQUFFLElBQUk7WUFDckMscUJBQXFCLEVBQUUsSUFBSTtZQUMzQixrQkFBa0IsRUFBRSxHQUFHO1lBQ3ZCLDRCQUE0QixFQUFFLElBQUk7WUFDbEMsb0JBQW9CLEVBQUUsSUFBSTtTQUMxQixDQUFDO1FBY00sbUJBQWMsR0FBRyxDQUFDLENBQUM7UUFtSFYsMEJBQXFCLEdBQUcsSUFBSSxHQUFHLEVBQWlCLENBQUM7UUF1RWpELGNBQVMsR0FBRyxJQUFJLEdBQUcsRUFBMEMsQ0FBQztRQWdCL0U7OztXQUdHO1FBQ0ssbUJBQWMsR0FBb0IsRUFBRSxDQUFDO1FBcUI3Qzs7O1dBR0c7UUFDSyw4QkFBeUIsR0FBRzs7WUFDbkMsT0FBTztnQkFDTixJQUFJLEVBQUUsS0FBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEtBQUssQ0FBQztnQkFDdEMsS0FBSyxFQUFFLE1BQUEsS0FBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLEVBQUUsbUNBQUksSUFBSTthQUN4QyxDQUFDO1FBQ0gsQ0FBQyxDQUFDO1FBRU0sZ0JBQVcsR0FBRyxLQUFLLENBQUM7UUF6UDNCLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBRTdCLElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRTtZQUN6QixLQUFLLElBQU0sR0FBRyxJQUFJLE1BQU0sRUFBRTtnQkFDeEIsSUFBSSxDQUFDLE1BQWMsQ0FBQyxHQUFHLENBQUMsR0FB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QUFhLENBQUMsUUFBUSxDQUN0QixDQUFDO3FEQUNGOzs7Ozs7Ozs7NENBQ0YsQ0FBQyxDQUFDO2lEQUNELE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBQTs7d0NBL0JmLFNBK0JlLENBQUM7Ozs7Ozs7OzZCQWxEVixJQUFJOzs7Ozs7Ozt3QkFxRFgsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7Ozs7O0tBQ3pCO0lBRU8sb0NBQWdCLEdBQXhCLFVBQXlCLElBQVUsRUFBRSxLQUFVLEVBQUUsT0FBZSxFQUFFLFFBQWdCO1FBQ2pGLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLDBCQUEwQixFQUFFO1lBQzNELElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQywrQkFBK0IsRUFBRTtnQkFDeEMsSUFBQSxJQUFJLEdBQWdDLElBQUksS0FBcEMsRUFBRSxJQUFJLEdBQTBCLElBQUksS0FBOUIsRUFBRSxFQUFFLEdBQXNCLElBQUksR0FBMUIsRUFBRSxPQUFPLEdBQWEsSUFBSSxRQUFqQixFQUFFLE1BQU0sR0FBSyxJQUFJLE9BQVQsQ0FBVTtnQkFDakQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7YUFDM0Q7aUJBQU07Z0JBQ04sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNuQjtTQUNEO2FBQU07WUFDTixJQUFJLENBQUMsa0JBQWtCLHVCQUNuQixJQUFJLEtBQ1AsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxFQUN6QixPQUFPLFNBQUEsRUFDUCxRQUFRLFVBQUEsSUFDUCxDQUFDO1NBQ0g7SUFDRixDQUFDO0lBQ0YsZ0JBQUM7QUFBRCxDQXBWQSxBQW9WQyxJQUFBIiwiZmlsZSI6InNjaGVkdWxpbmcvU2NoZWR1bGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVNjaGVkdWxlclRyYW5zbGF0ZU9wdGlvbnMsIElTY2hlZHVsZXIgfSBmcm9tICcuJztcbmltcG9ydCB7XG5cdGxhbmdDb2RlLFxuXHRsYW5nQ29kZVdpdGhBdXRvLFxuXHRUcmFuc2xhdG9ySW5zdGFuY2VNZW1iZXJzLFxufSBmcm9tICcuLi90cmFuc2xhdG9ycy9UcmFuc2xhdG9yJztcbmltcG9ydCB7IFNlbWFwaG9yZSB9IGZyb20gJy4uL3V0aWxzL1NlbWFwaG9yZSc7XG5cbmludGVyZmFjZSBTY2hlZHVsZXJDb25maWcge1xuXHQvKipcblx0ICogTnVtYmVyIG9mIGF0dGVtcHRzIGZvciByZXRyeSByZXF1ZXN0XG5cdCAqL1xuXHR0cmFuc2xhdGVSZXRyeUF0dGVtcHRMaW1pdD86IG51bWJlcjtcblxuXHQvKipcblx0ICogSWYgdHJ1ZSAtIHJlamVjdGVkIHJlcXVlc3RzIHdpbGwgdXNlIGRpcmVjdCB0cmFuc2xhdGVcblx0ICovXG5cdGlzQWxsb3dEaXJlY3RUcmFuc2xhdGVCYWRDaHVua3M/OiBib29sZWFuO1xuXG5cdC8qKlxuXHQgKiBMZW5ndGggb2Ygc3RyaW5nIGZvciBkaXJlY3QgdHJhbnNsYXRlLlxuXHQgKlxuXHQgKiBudWxsIGZvciBkaXNhYmxlIHRoZSBjb25kaXRpb25cblx0ICovXG5cdGRpcmVjdFRyYW5zbGF0ZUxlbmd0aD86IG51bWJlciB8IG51bGw7XG5cblx0LyoqXG5cdCAqIERlbGF5IGZvciB0cmFuc2xhdGUgYSBjaHVuay4gVGhlIGJpZ2dlciB0aGUgbW9yZSByZXF1ZXN0cyB3aWxsIGNvbGxlY3Rcblx0ICovXG5cdHRyYW5zbGF0ZVBvb2xEZWxheT86IG51bWJlcjtcblxuXHQvKipcblx0ICogV2hlbiBjaHVuayBjb2xsZWN0IHRoaXMgc2l6ZSwgaXQncyB3aWxsIGJlIGluc3RhbnQgYWRkIHRvIGEgdHJhbnNsYXRlIHF1ZXVlXG5cdCAqXG5cdCAqIG51bGwgZm9yIGRpc2FibGUgdGhlIGNvbmRpdGlvblxuXHQgKi9cblx0Y2h1bmtTaXplRm9ySW5zdGFudFRyYW5zbGF0ZT86IG51bWJlciB8IG51bGw7XG5cblx0LyoqXG5cdCAqIFBhdXNlIGJldHdlZW4gaGFuZGxlIHRhc2sgYmF0Y2hlc1xuXHQgKlxuXHQgKiBJdCBtYXkgYmUgdXNlZnVsIHRvIGF3YWl0IGFjY3VtdWxhdGluZyBhIHRhc2sgYmF0Y2hlcyBpbiBxdWV1ZSB0byBjb25zaWRlciBwcmlvcml0eSBiZXR0ZXIgYW5kIGRvbid0IHRyYW5zbGF0ZSBmaXJzdCB0YXNrIGJhdGNoIGltbWVkaWF0ZWx5XG5cdCAqXG5cdCAqIFdBUk5JTkc6IHRoaXMgb3B0aW9uIG11c3QgYmUgdXNlZCBvbmx5IGZvciBjb25zaWRlciBwcmlvcml0eSBiZXR0ZXIhIFNldCBzbWFsbCB2YWx1ZSBhbHdheXMgKDEwLTUwbXMpXG5cdCAqXG5cdCAqIFdoZW4gdGhpcyBvcHRpb24gaXMgZGlzYWJsZWQgKGJ5IGRlZmF1bHQpIGFuZCB5b3UgY2FsbCB0cmFuc2xhdGUgbWV0aG9kIGZvciB0ZXh0cyB3aXRoIHByaW9yaXR5IDEgYW5kIHRoZW4gaW1tZWRpYXRlbHkgZm9yIHRleHQgd2l0aCBwcmlvcml0eSAyLCBmaXJzdCByZXF1ZXN0IHdpbGwgaGF2ZSBsZXNzIGRlbGF5IGZvciB0cmFuc2xhdGUgYW5kIHdpbGwgdHJhbnNsYXRlIGZpcnN0LCBldmVuIHdpdGggbG93ZXIgcHJpb3JpdHksIGJlY2F1c2Ugd29ya2VyIHdpbGwgdHJhbnNsYXRlIGZpcnN0IHRhc2sgaW1tZWRpYXRlbHkgYWZ0ZXIgZGVsYXkgZGVmaW5lZCBieSBvcHRpb24gYHRyYW5zbGF0ZVBvb2xEZWxheWBcblx0ICovXG5cdHRhc2tCYXRjaEhhbmRsZURlbGF5PzogbnVsbCB8IG51bWJlcjtcbn1cblxuaW50ZXJmYWNlIFRhc2tDb25zdHJ1Y3RvciB7XG5cdHRleHQ6IHN0cmluZztcblx0ZnJvbTogbGFuZ0NvZGVXaXRoQXV0bztcblx0dG86IGxhbmdDb2RlO1xuXG5cdC8qKlxuXHQgKiBUbyBjb21iaW5lIHRhc2tzIGJ5IHVuaXF1ZSBrZXlcblx0ICovXG5cdGNvbnRleHQ/OiBzdHJpbmc7XG5cblx0LyoqXG5cdCAqIFRvIGNvbWJpbmUgYW5kIHNvcnQgdGFza3MgYnkgcHJpb3JpdHlcblx0ICovXG5cdHByaW9yaXR5OiBudW1iZXI7XG59XG5cbmludGVyZmFjZSBUYXNrQ29uc3RydWN0b3JJbnRlcm5hbCBleHRlbmRzIFRhc2tDb25zdHJ1Y3RvciB7XG5cdC8qKlxuXHQgKiBDdXJyZW50IHJldHJ5IGF0dGVtcHRcblx0ICovXG5cdGF0dGVtcHQ/OiBudW1iZXI7XG5cblx0cmVzb2x2ZTogKHZhbHVlOiBzdHJpbmcgfCBQcm9taXNlTGlrZTxzdHJpbmc+KSA9PiB2b2lkO1xuXHRyZWplY3Q6IChyZWFzb24/OiBhbnkpID0+IHZvaWQ7XG59XG5cbmludGVyZmFjZSBUYXNrIHtcblx0dGV4dDogc3RyaW5nO1xuXHRmcm9tOiBsYW5nQ29kZVdpdGhBdXRvO1xuXHR0bzogbGFuZ0NvZGU7XG5cblx0LyoqXG5cdCAqIEN1cnJlbnQgcmV0cnkgYXR0ZW1wdFxuXHQgKi9cblx0YXR0ZW1wdDogbnVtYmVyO1xuXG5cdHJlc29sdmU6ICh2YWx1ZTogc3RyaW5nIHwgUHJvbWlzZUxpa2U8c3RyaW5nPikgPT4gdm9pZDtcblx0cmVqZWN0OiAocmVhc29uPzogYW55KSA9PiB2b2lkO1xufVxuXG5pbnRlcmZhY2UgVGFza0NvbnRhaW5lciB7XG5cdC8qKlxuXHQgKiBGb3IgY29tYmluZSB0YXNrcyBieSB1bmlxdWUga2V5XG5cdCAqL1xuXHRjb250ZXh0OiBzdHJpbmc7XG5cblx0cHJpb3JpdHk6IG51bWJlcjtcblxuXHRmcm9tOiBsYW5nQ29kZVdpdGhBdXRvO1xuXHR0bzogbGFuZ0NvZGU7XG5cdHRhc2tzOiBUYXNrW107XG5cblx0LyoqXG5cdCAqIFRvdGFsIGxlbmd0aCBvZiB0ZXh0IGZyb20gYWxsIHRhc2tzXG5cdCAqL1xuXHRsZW5ndGg6IG51bWJlcjtcbn1cblxudHlwZSBJdGVyYXRvclN0ZXA8VD4gPSB7XG5cdGRvbmU6IGJvb2xlYW47XG5cdHZhbHVlOiBUIHwgbnVsbDtcbn07XG5cbi8qKlxuICogTW9kdWxlIGZvciBzY2hlZHVsaW5nIGFuZCBvcHRpbWl6YXRpb24gb2YgdHJhbnNsYXRlIGEgdGV4dCBzdHJlYW1zXG4gKlxuICogLSBJdCBjYW4gdW5pb24gbWFueSB0cmFuc2xhdGUgcmVxdWVzdHMgdG8gb25lXG4gKiAtIFlvdSBjYW4gZ3JvdXAgYW55IHJlcXVlc3RzIGJ5IGNvbnRleHRcbiAqIC0gSXQncyBjb25maWd1cmFibGUuIFlvdSBjYW4gc2V0IHJldHJ5IGxpbWl0IGFuZCBlZGdlIGZvciBkaXJlY3QgdHJhbnNsYXRlXG4gKi9cbmV4cG9ydCBjbGFzcyBTY2hlZHVsZXIgaW1wbGVtZW50cyBJU2NoZWR1bGVyIHtcblx0cHJpdmF0ZSByZWFkb25seSBzZW1hZm9yO1xuXHRwcml2YXRlIHJlYWRvbmx5IHRyYW5zbGF0b3I7XG5cdHByaXZhdGUgcmVhZG9ubHkgY29uZmlnOiBSZXF1aXJlZDxTY2hlZHVsZXJDb25maWc+ID0ge1xuXHRcdHRyYW5zbGF0ZVJldHJ5QXR0ZW1wdExpbWl0OiAyLFxuXHRcdGlzQWxsb3dEaXJlY3RUcmFuc2xhdGVCYWRDaHVua3M6IHRydWUsXG5cdFx0ZGlyZWN0VHJhbnNsYXRlTGVuZ3RoOiBudWxsLFxuXHRcdHRyYW5zbGF0ZVBvb2xEZWxheTogMzAwLFxuXHRcdGNodW5rU2l6ZUZvckluc3RhbnRUcmFuc2xhdGU6IG51bGwsXG5cdFx0dGFza0JhdGNoSGFuZGxlRGVsYXk6IG51bGwsXG5cdH07XG5cblx0Y29uc3RydWN0b3IodHJhbnNsYXRvcjogVHJhbnNsYXRvckluc3RhbmNlTWVtYmVycywgY29uZmlnPzogU2NoZWR1bGVyQ29uZmlnKSB7XG5cdFx0dGhpcy50cmFuc2xhdG9yID0gdHJhbnNsYXRvcjtcblxuXHRcdGlmIChjb25maWcgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0Zm9yIChjb25zdCBrZXkgaW4gY29uZmlnKSB7XG5cdFx0XHRcdCh0aGlzLmNvbmZpZyBhcyBhbnkpW2tleV0gPSAoY29uZmlnIGFzIGFueSlba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLnNlbWFmb3IgPSBuZXcgU2VtYXBob3JlKHsgdGltZW91dDogdHJhbnNsYXRvci5nZXRSZXF1ZXN0c1RpbWVvdXQoKSB9KTtcblx0fVxuXG5cdHByaXZhdGUgY29udGV4dENvdW50ZXIgPSAwO1xuXHRwdWJsaWMgYXN5bmMgdHJhbnNsYXRlKFxuXHRcdHRleHQ6IHN0cmluZyxcblx0XHRmcm9tOiBsYW5nQ29kZVdpdGhBdXRvLFxuXHRcdHRvOiBsYW5nQ29kZSxcblx0XHRvcHRpb25zPzogSVNjaGVkdWxlclRyYW5zbGF0ZU9wdGlvbnMsXG5cdCkge1xuXHRcdGNvbnN0IHtcblx0XHRcdGNvbnRleHQgPSAnJyxcblx0XHRcdHByaW9yaXR5ID0gMCxcblx0XHRcdGRpcmVjdFRyYW5zbGF0ZTogZGlyZWN0VHJhbnNsYXRlRm9yVGhpc1JlcXVlc3QgPSBmYWxzZSxcblx0XHR9ID0gb3B0aW9ucyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucyA6IHt9O1xuXG5cdFx0aWYgKHRoaXMudHJhbnNsYXRvci5jaGVja0xpbWl0RXhjZWVkaW5nKHRleHQpIDw9IDApIHtcblx0XHRcdC8vIERpcmVjdCB0cmFuc2xhdGVcblx0XHRcdGlmIChcblx0XHRcdFx0ZGlyZWN0VHJhbnNsYXRlRm9yVGhpc1JlcXVlc3QgfHxcblx0XHRcdFx0KHRoaXMuY29uZmlnLmRpcmVjdFRyYW5zbGF0ZUxlbmd0aCAhPT0gbnVsbCAmJlxuXHRcdFx0XHRcdHRleHQubGVuZ3RoID49IHRoaXMuY29uZmlnLmRpcmVjdFRyYW5zbGF0ZUxlbmd0aClcblx0XHRcdCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5kaXJlY3RUcmFuc2xhdGUodGV4dCwgZnJvbSwgdG8pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMubWFrZVRhc2soeyB0ZXh0OiB0ZXh0LCBmcm9tLCB0bywgY29udGV4dCwgcHJpb3JpdHkgfSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFNwbGl0IHRleHQgYnkgd29yZHMgYW5kIHRyYW5zbGF0ZVxuXHRcdFx0cmV0dXJuIHRoaXMuc3BsaXRBbmRUcmFuc2xhdGUodGV4dCwgZnJvbSwgdG8sIGNvbnRleHQsIHByaW9yaXR5KTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIGFzeW5jIGRpcmVjdFRyYW5zbGF0ZSh0ZXh0OiBzdHJpbmcsIGZyb206IGxhbmdDb2RlV2l0aEF1dG8sIHRvOiBsYW5nQ29kZSkge1xuXHRcdGNvbnN0IGZyZWUgPSBhd2FpdCB0aGlzLnNlbWFmb3IudGFrZSgpO1xuXHRcdHJldHVybiB0aGlzLnRyYW5zbGF0b3IudHJhbnNsYXRlKHRleHQsIGZyb20sIHRvKS5maW5hbGx5KGZyZWUpO1xuXHR9XG5cblx0cHJpdmF0ZSBzcGxpdEFuZFRyYW5zbGF0ZShcblx0XHR0ZXh0OiBzdHJpbmcsXG5cdFx0ZnJvbTogbGFuZ0NvZGVXaXRoQXV0byxcblx0XHR0bzogbGFuZ0NvZGUsXG5cdFx0Y29udGV4dDogc3RyaW5nLFxuXHRcdHByaW9yaXR5OiBudW1iZXIsXG5cdCkge1xuXHRcdGNvbnN0IHNwbGl0dGVkVGV4dDogc3RyaW5nW10gPSBbXTtcblx0XHRjb25zdCBjaGFyc2V0SW5kZXhlczogbnVtYmVyW10gPSBbXTtcblxuXHRcdGxldCB3b3Jkc0J1ZmZlciA9ICcnO1xuXHRcdGZvciAoY29uc3QgdGV4dE1hdGNoIG9mIHRleHQubWF0Y2hBbGwoLyhbXlxcc10rKShcXHMqKS9nKSkge1xuXHRcdFx0Y29uc3QgbmV3UGFydCA9IHRleHRNYXRjaFswXTtcblx0XHRcdGNvbnN0IG5ld0J1ZmZlciA9IHdvcmRzQnVmZmVyICsgbmV3UGFydDtcblxuXHRcdFx0Ly8gQWRkIHdvcmQgdG8gYnVmZmVyIGlmIGNhblxuXHRcdFx0aWYgKHRoaXMudHJhbnNsYXRvci5jaGVja0xpbWl0RXhjZWVkaW5nKG5ld0J1ZmZlcikgPD0gMCkge1xuXHRcdFx0XHR3b3Jkc0J1ZmZlciA9IG5ld0J1ZmZlcjtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdyaXRlIGFuZCBjbGVhciBidWZmZXIgaWYgbm90IGVtcHRoeVxuXHRcdFx0aWYgKHdvcmRzQnVmZmVyLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0c3BsaXR0ZWRUZXh0LnB1c2god29yZHNCdWZmZXIpO1xuXHRcdFx0XHR3b3Jkc0J1ZmZlciA9ICcnO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIYW5kbGUgbmV3IHBhcnRcblx0XHRcdGlmICh0aGlzLnRyYW5zbGF0b3IuY2hlY2tMaW1pdEV4Y2VlZGluZyhuZXdQYXJ0KSA8PSAwKSB7XG5cdFx0XHRcdC8vIEFkZCB0byBidWZmZXJcblx0XHRcdFx0d29yZHNCdWZmZXIgKz0gbmV3UGFydDtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBTbGljZSBieSBjaGFyc1xuXHRcdFx0XHRsZXQgY2hhcnNCdWZmZXIgPSBuZXdQYXJ0O1xuXHRcdFx0XHR3aGlsZSAoY2hhcnNCdWZmZXIubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRcdGNvbnN0IGV4dHJhQ2hhcnMgPSB0aGlzLnRyYW5zbGF0b3IuY2hlY2tMaW1pdEV4Y2VlZGluZyhjaGFyc0J1ZmZlcik7XG5cdFx0XHRcdFx0aWYgKGV4dHJhQ2hhcnMgPiAwKSB7XG5cdFx0XHRcdFx0XHRjb25zdCBvZmZzZXQgPSBjaGFyc0J1ZmZlci5sZW5ndGggLSBleHRyYUNoYXJzO1xuXG5cdFx0XHRcdFx0XHQvLyBXcml0ZSBzbGljZSBhbmQgcmVtYWluZGVyXG5cdFx0XHRcdFx0XHRzcGxpdHRlZFRleHQucHVzaChjaGFyc0J1ZmZlci5zbGljZSgwLCBvZmZzZXQpKTtcblx0XHRcdFx0XHRcdGNoYXJzQnVmZmVyID0gY2hhcnNCdWZmZXIuc2xpY2Uob2Zmc2V0KTtcblxuXHRcdFx0XHRcdFx0Y2hhcnNldEluZGV4ZXMucHVzaChzcGxpdHRlZFRleHQubGVuZ3RoIC0gMSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Y29uc3QgY3R4UHJlZml4ID0gY29udGV4dC5sZW5ndGggPiAwID8gY29udGV4dCArICc7JyA6ICcnO1xuXHRcdHJldHVybiBQcm9taXNlLmFsbChcblx0XHRcdHNwbGl0dGVkVGV4dC5tYXAoKHRleHQsIGluZGV4KSA9PlxuXHRcdFx0XHRjaGFyc2V0SW5kZXhlcy5pbmRleE9mKGluZGV4KSAhPT0gLTFcblx0XHRcdFx0XHQ/IHRleHRcblx0XHRcdFx0XHQ6IHRoaXMubWFrZVRhc2soe1xuXHRcdFx0XHRcdFx0dGV4dCxcblx0XHRcdFx0XHRcdGZyb20sXG5cdFx0XHRcdFx0XHR0byxcblx0XHRcdFx0XHRcdGNvbnRleHQ6IGN0eFByZWZpeCArIGB0ZXh0IyR7dGhpcy5jb250ZXh0Q291bnRlcisrfWAsXG5cdFx0XHRcdFx0XHRwcmlvcml0eSxcblx0XHRcdFx0XHQgIH0pLFxuXHRcdFx0KSxcblx0XHQpLnRoZW4oKHRyYW5zbGF0ZWRQYXJ0cykgPT4gdHJhbnNsYXRlZFBhcnRzLmpvaW4oJycpKTtcblx0fVxuXG5cdHByaXZhdGUgbWFrZVRhc2soeyB0ZXh0LCBmcm9tLCB0bywgcHJpb3JpdHksIGNvbnRleHQgPSAnJyB9OiBUYXNrQ29uc3RydWN0b3IpIHtcblx0XHRyZXR1cm4gbmV3IFByb21pc2U8c3RyaW5nPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHR0aGlzLmFkZFRvVGFza0NvbnRhaW5lcih7XG5cdFx0XHRcdHRleHQsXG5cdFx0XHRcdGZyb20sXG5cdFx0XHRcdHRvLFxuXHRcdFx0XHRjb250ZXh0LFxuXHRcdFx0XHRwcmlvcml0eSxcblx0XHRcdFx0cmVzb2x2ZSxcblx0XHRcdFx0cmVqZWN0LFxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH1cblxuXHRwcml2YXRlIHJlYWRvbmx5IHRhc2tDb250YWluZXJzU3RvcmFnZSA9IG5ldyBTZXQ8VGFza0NvbnRhaW5lcj4oKTtcblx0cHJpdmF0ZSBhZGRUb1Rhc2tDb250YWluZXIocGFyYW1zOiBUYXNrQ29uc3RydWN0b3JJbnRlcm5hbCkge1xuXHRcdGNvbnN0IHtcblx0XHRcdHRleHQsXG5cdFx0XHRmcm9tLFxuXHRcdFx0dG8sXG5cdFx0XHRhdHRlbXB0ID0gMCxcblx0XHRcdGNvbnRleHQgPSAnJyxcblx0XHRcdHByaW9yaXR5LFxuXHRcdFx0cmVzb2x2ZSxcblx0XHRcdHJlamVjdCxcblx0XHR9ID0gcGFyYW1zO1xuXG5cdFx0Ly8gY3JlYXRlIHRhc2tcblx0XHRjb25zdCB0YXNrOiBUYXNrID0ge1xuXHRcdFx0dGV4dCxcblx0XHRcdGZyb20sXG5cdFx0XHR0byxcblx0XHRcdGF0dGVtcHQsXG5cdFx0XHRyZXNvbHZlLFxuXHRcdFx0cmVqZWN0LFxuXHRcdH07XG5cblx0XHRsZXQgY29udGFpbmVyOiBUYXNrQ29udGFpbmVyIHwgbnVsbCA9IG51bGw7XG5cblx0XHQvLyB0cnkgYWRkIHRvIGV4aXN0cyBjb250YWluZXJcblx0XHRmb3IgKGNvbnN0IHRhc2tDb250YWluZXIgb2YgdGhpcy50YXNrQ29udGFpbmVyc1N0b3JhZ2UpIHtcblx0XHRcdC8vIFNraXAgY29udGFpbmVycyB3aXRoIG5vdCBlcXVhbCBwYXJhbWV0ZXJzXG5cdFx0XHRpZiAoXG5cdFx0XHRcdFsnZnJvbScsICd0bycsICdjb250ZXh0JywgJ3ByaW9yaXR5J10uc29tZShcblx0XHRcdFx0XHQoa2V5KSA9PiAocGFyYW1zIGFzIGFueSlba2V5XSAhPT0gKHRhc2tDb250YWluZXIgYXMgYW55KVtrZXldLFxuXHRcdFx0XHQpXG5cdFx0XHQpXG5cdFx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0XHQvLyBMaWdodHdlaWdodCBjaGVjayB0byBvdmVyZmxvd1xuXHRcdFx0Ly8gTk9URTogRG8gc3RyaWN0IGNoZWNrIGhlcmUgaWYgeW91IG5lZWQgY29tcGx5IGEgbGltaXQgY29udHJhY3Rcblx0XHRcdGlmIChcblx0XHRcdFx0dGhpcy50cmFuc2xhdG9yLmdldExlbmd0aExpbWl0KCkgPj1cblx0XHRcdFx0dGFza0NvbnRhaW5lci5sZW5ndGggKyB0YXNrLnRleHQubGVuZ3RoXG5cdFx0XHQpIHtcblx0XHRcdFx0dGFza0NvbnRhaW5lci50YXNrcy5wdXNoKHRhc2spO1xuXHRcdFx0XHR0YXNrQ29udGFpbmVyLmxlbmd0aCArPSB0YXNrLnRleHQubGVuZ3RoO1xuXHRcdFx0XHRjb250YWluZXIgPSB0YXNrQ29udGFpbmVyO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIG1ha2UgY29udGFpbmVyXG5cdFx0aWYgKGNvbnRhaW5lciA9PT0gbnVsbCkge1xuXHRcdFx0Y29uc3QgbmV3VGFza0NvbnRhaW5lcjogVGFza0NvbnRhaW5lciA9IHtcblx0XHRcdFx0Y29udGV4dCxcblx0XHRcdFx0cHJpb3JpdHksXG5cdFx0XHRcdGZyb20sXG5cdFx0XHRcdHRvLFxuXHRcdFx0XHR0YXNrczogW3Rhc2tdLFxuXHRcdFx0XHRsZW5ndGg6IHRhc2sudGV4dC5sZW5ndGgsXG5cdFx0XHR9O1xuXHRcdFx0dGhpcy50YXNrQ29udGFpbmVyc1N0b3JhZ2UuYWRkKG5ld1Rhc2tDb250YWluZXIpO1xuXHRcdFx0Y29udGFpbmVyID0gbmV3VGFza0NvbnRhaW5lcjtcblx0XHR9XG5cblx0XHRpZiAoXG5cdFx0XHR0aGlzLmNvbmZpZy5jaHVua1NpemVGb3JJbnN0YW50VHJhbnNsYXRlICE9PSBudWxsICYmXG5cdFx0XHRjb250YWluZXIubGVuZ3RoID49IHRoaXMuY29uZmlnLmNodW5rU2l6ZUZvckluc3RhbnRUcmFuc2xhdGVcblx0XHQpIHtcblx0XHRcdHRoaXMuYWRkVG9UcmFuc2xhdGVRdWV1ZShjb250YWluZXIpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnVwZGF0ZURlbGF5Rm9yQWRkVG9UcmFuc2xhdGVRdWV1ZShjb250YWluZXIpO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgcmVhZG9ubHkgdGltZXJzTWFwID0gbmV3IE1hcDxUYXNrQ29udGFpbmVyLCBudW1iZXIgfCBOb2RlSlMuVGltZW91dD4oKTtcblx0cHJpdmF0ZSB1cGRhdGVEZWxheUZvckFkZFRvVHJhbnNsYXRlUXVldWUodGFza0NvbnRhaW5lcjogVGFza0NvbnRhaW5lcikge1xuXHRcdC8vIEZsdXNoIHRpbWVyXG5cdFx0aWYgKHRoaXMudGltZXJzTWFwLmhhcyh0YXNrQ29udGFpbmVyKSkge1xuXHRcdFx0Ly8gRHVlIHRvIGV4cGVjdGF0aW9uIHJ1biBvbiBvbmUgcGxhdGZvcm0sIHRpbWVyIG9iamVjdHMgd2lsbCBzYW1lIGFsd2F5c1xuXHRcdFx0Z2xvYmFsVGhpcy5jbGVhclRpbWVvdXQodGhpcy50aW1lcnNNYXAuZ2V0KHRhc2tDb250YWluZXIpIGFzIGFueSk7XG5cdFx0fVxuXG5cdFx0dGhpcy50aW1lcnNNYXAuc2V0KFxuXHRcdFx0dGFza0NvbnRhaW5lcixcblx0XHRcdGdsb2JhbFRoaXMuc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdHRoaXMuYWRkVG9UcmFuc2xhdGVRdWV1ZSh0YXNrQ29udGFpbmVyKTtcblx0XHRcdH0sIHRoaXMuY29uZmlnLnRyYW5zbGF0ZVBvb2xEZWxheSksXG5cdFx0KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBUYXNrcyBxdWV1ZSB3aXRoIGl0ZW1zIHNvcnRlZCBieSBwcmlvcml0eVxuXHQgKiBJdCBtdXN0IGJlIGhhbmRsZWQgZnJvbSBlbmQgdG8gc3RhcnRcblx0ICovXG5cdHByaXZhdGUgdHJhbnNsYXRlUXVldWU6IFRhc2tDb250YWluZXJbXSA9IFtdO1xuXHRwcml2YXRlIGFkZFRvVHJhbnNsYXRlUXVldWUodGFza0NvbnRhaW5lcjogVGFza0NvbnRhaW5lcikge1xuXHRcdC8vIEZsdXNoIHRpbWVyXG5cdFx0aWYgKHRoaXMudGltZXJzTWFwLmhhcyh0YXNrQ29udGFpbmVyKSkge1xuXHRcdFx0Ly8gRHVlIHRvIGV4cGVjdGF0aW9uIHJ1biBvbiBvbmUgcGxhdGZvcm0sIHRpbWVyIG9iamVjdHMgd2lsbCBzYW1lIGFsd2F5c1xuXHRcdFx0Z2xvYmFsVGhpcy5jbGVhclRpbWVvdXQodGhpcy50aW1lcnNNYXAuZ2V0KHRhc2tDb250YWluZXIpIGFzIGFueSk7XG5cdFx0XHR0aGlzLnRpbWVyc01hcC5kZWxldGUodGFza0NvbnRhaW5lcik7XG5cdFx0fVxuXG5cdFx0dGhpcy50YXNrQ29udGFpbmVyc1N0b3JhZ2UuZGVsZXRlKHRhc2tDb250YWluZXIpO1xuXG5cdFx0Ly8gUmVzb3J0IHF1ZXVlIGJ5IHByaW9yaXR5IGVhY2ggdGltZSB0byBrZWVwIGNvbnNpc3RlbmN5XG5cdFx0dGhpcy50cmFuc2xhdGVRdWV1ZSA9IHRoaXMudHJhbnNsYXRlUXVldWVcblx0XHRcdC5jb25jYXQodGFza0NvbnRhaW5lcilcblx0XHRcdC5zb3J0KChhLCBiKSA9PiBhLnByaW9yaXR5IC0gYi5wcmlvcml0eSk7XG5cblx0XHRpZiAoIXRoaXMud29ya2VyU3RhdGUpIHtcblx0XHRcdHRoaXMucnVuV29ya2VyKCk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybiBmaXJzdCBpdGVtIGZyb20gcXVldWUgYW5kIGRlbGV0ZSBpdCBmcm9tIHF1ZXVlXG5cdCAqIEl0ZW1zIGlzIHNvcnRlZCBieSBwcmlvcml0eVxuXHQgKi9cblx0cHJpdmF0ZSBnZXRJdGVtRnJvbVRyYW5zbGF0ZVF1ZXVlID0gKCk6IEl0ZXJhdG9yU3RlcDxUYXNrQ29udGFpbmVyPiA9PiB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGRvbmU6IHRoaXMudHJhbnNsYXRlUXVldWUubGVuZ3RoID09PSAwLFxuXHRcdFx0dmFsdWU6IHRoaXMudHJhbnNsYXRlUXVldWUucG9wKCkgPz8gbnVsbCxcblx0XHR9O1xuXHR9O1xuXG5cdHByaXZhdGUgd29ya2VyU3RhdGUgPSBmYWxzZTtcblx0cHJpdmF0ZSBhc3luYyBydW5Xb3JrZXIoKSB7XG5cdFx0dGhpcy53b3JrZXJTdGF0ZSA9IHRydWU7XG5cblx0XHRsZXQgZmlyc3RJdGVyYXRpb24gPSB0cnVlO1xuXHRcdHdoaWxlICh0cnVlKSB7XG5cdFx0XHQvLyBEZWxheSBmaXJzdCBpdGVyYXRpb24gdG8gYXdhaXQgZmlsbCB0aGUgcXVldWUsIHRvIGNvbnNpZGVyIHByaW9yaXR5IGJldHRlclxuXHRcdFx0Y29uc3Qgd29ya2VySGFuZGxlRGVsYXkgPSB0aGlzLmNvbmZpZy50YXNrQmF0Y2hIYW5kbGVEZWxheTtcblx0XHRcdGlmICh3b3JrZXJIYW5kbGVEZWxheSAmJiBmaXJzdEl0ZXJhdGlvbikge1xuXHRcdFx0XHRhd2FpdCBuZXcgUHJvbWlzZSgocmVzKSA9PiBzZXRUaW1lb3V0KHJlcywgd29ya2VySGFuZGxlRGVsYXkpKTtcblx0XHRcdH1cblxuXHRcdFx0Zmlyc3RJdGVyYXRpb24gPSBmYWxzZTtcblxuXHRcdFx0Y29uc3QgaXRlcmF0ZSA9IHRoaXMuZ2V0SXRlbUZyb21UcmFuc2xhdGVRdWV1ZSgpO1xuXG5cdFx0XHQvLyBTa2lwIHdoZW4gcXVldWUgZW1wdHlcblx0XHRcdGlmIChpdGVyYXRlLmRvbmUgfHwgaXRlcmF0ZS52YWx1ZSA9PT0gbnVsbCkgYnJlYWs7XG5cblx0XHRcdGNvbnN0IHRhc2tDb250YWluZXIgPSBpdGVyYXRlLnZhbHVlO1xuXG5cdFx0XHRjb25zdCBmcmVlID0gYXdhaXQgdGhpcy5zZW1hZm9yLnRha2UoKTtcblxuXHRcdFx0Y29uc3QgdGV4dEFycmF5ID0gdGFza0NvbnRhaW5lci50YXNrcy5tYXAoKGkpID0+IGkudGV4dCk7XG5cdFx0XHRhd2FpdCB0aGlzLnRyYW5zbGF0b3Jcblx0XHRcdFx0LnRyYW5zbGF0ZUJhdGNoKHRleHRBcnJheSwgdGFza0NvbnRhaW5lci5mcm9tLCB0YXNrQ29udGFpbmVyLnRvKVxuXHRcdFx0XHQudGhlbigocmVzdWx0KSA9PiB7XG5cdFx0XHRcdFx0Zm9yIChjb25zdCBpbmRleCBpbiB0YXNrQ29udGFpbmVyLnRhc2tzKSB7XG5cdFx0XHRcdFx0XHRjb25zdCB0YXNrID0gdGFza0NvbnRhaW5lci50YXNrc1tpbmRleF07XG5cblx0XHRcdFx0XHRcdGNvbnN0IHRyYW5zbGF0ZWRUZXh0ID0gcmVzdWx0W2luZGV4XTtcblx0XHRcdFx0XHRcdGlmICh0cmFuc2xhdGVkVGV4dCAhPT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0XHR0YXNrLnJlc29sdmUodHJhbnNsYXRlZFRleHQpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0dGhpcy50YXNrRXJyb3JIYW5kbGVyKFxuXHRcdFx0XHRcdFx0XHRcdHRhc2ssXG5cdFx0XHRcdFx0XHRcdFx0bmV3IEVycm9yKFwiVHJhbnNsYXRvciBtb2R1bGUgY2FuJ3QgdHJhbnNsYXRlIHRoaXNcIiksXG5cdFx0XHRcdFx0XHRcdFx0dGFza0NvbnRhaW5lci5jb250ZXh0LFxuXHRcdFx0XHRcdFx0XHRcdHRhc2tDb250YWluZXIucHJpb3JpdHksXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KVxuXHRcdFx0XHQuY2F0Y2goKHJlYXNvbikgPT4ge1xuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IocmVhc29uKTtcblxuXHRcdFx0XHRcdGZvciAoY29uc3QgdGFzayBvZiB0YXNrQ29udGFpbmVyLnRhc2tzKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRhc2tFcnJvckhhbmRsZXIoXG5cdFx0XHRcdFx0XHRcdHRhc2ssXG5cdFx0XHRcdFx0XHRcdHJlYXNvbixcblx0XHRcdFx0XHRcdFx0dGFza0NvbnRhaW5lci5jb250ZXh0LFxuXHRcdFx0XHRcdFx0XHR0YXNrQ29udGFpbmVyLnByaW9yaXR5LFxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5maW5hbGx5KGZyZWUpO1xuXHRcdH1cblxuXHRcdHRoaXMud29ya2VyU3RhdGUgPSBmYWxzZTtcblx0fVxuXG5cdHByaXZhdGUgdGFza0Vycm9ySGFuZGxlcih0YXNrOiBUYXNrLCBlcnJvcjogYW55LCBjb250ZXh0OiBzdHJpbmcsIHByaW9yaXR5OiBudW1iZXIpIHtcblx0XHRpZiAodGFzay5hdHRlbXB0ID49IHRoaXMuY29uZmlnLnRyYW5zbGF0ZVJldHJ5QXR0ZW1wdExpbWl0KSB7XG5cdFx0XHRpZiAodGhpcy5jb25maWcuaXNBbGxvd0RpcmVjdFRyYW5zbGF0ZUJhZENodW5rcykge1xuXHRcdFx0XHRjb25zdCB7IHRleHQsIGZyb20sIHRvLCByZXNvbHZlLCByZWplY3QgfSA9IHRhc2s7XG5cdFx0XHRcdHRoaXMuZGlyZWN0VHJhbnNsYXRlKHRleHQsIGZyb20sIHRvKS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0YXNrLnJlamVjdChlcnJvcik7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuYWRkVG9UYXNrQ29udGFpbmVyKHtcblx0XHRcdFx0Li4udGFzayxcblx0XHRcdFx0YXR0ZW1wdDogdGFzay5hdHRlbXB0ICsgMSxcblx0XHRcdFx0Y29udGV4dCxcblx0XHRcdFx0cHJpb3JpdHksXG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cbn1cbiJdfQ==
