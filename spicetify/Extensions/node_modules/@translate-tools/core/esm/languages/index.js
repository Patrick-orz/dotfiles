var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
import languages from './ISO639LangCodesList';
/**
 * Check is string are 639-1 lang code
 *
 * Values are case sensitive, if you need, you have to convert strings to lower case to check
 */
export var isLanguageCodeISO639v1 = function (code) {
    return Boolean(code && languages.some(function (lang) { return code === lang.v1; }));
};
/**
 * Check is string are 639-2 lang code
 *
 * Values are case sensitive, if you need, you have to convert strings to lower case to check
 */
export var isLanguageCodeISO639v2 = function (code) {
    return Boolean(code &&
        languages.some(function (lang) { return code === lang.v2 || code === lang.v2B || code === lang.v2T; }));
};
/**
 * Return subset of ISO-639 lang codes
 */
export var getLanguageCodesISO639 = function (set) {
    var e_1, _a;
    var pickedLanguages = [];
    try {
        for (var languages_1 = __values(languages), languages_1_1 = languages_1.next(); !languages_1_1.done; languages_1_1 = languages_1.next()) {
            var lang = languages_1_1.value;
            switch (set) {
                case 'v1':
                    if (lang.v1) {
                        pickedLanguages.push(lang.v1);
                    }
                    break;
                case 'v2':
                    pickedLanguages.push(lang.v2);
                    break;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (languages_1_1 && !languages_1_1.done && (_a = languages_1.return)) _a.call(languages_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return pickedLanguages;
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxhbmd1YWdlcy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLE9BQU8sU0FBUyxNQUFNLHVCQUF1QixDQUFDO0FBRTlDOzs7O0dBSUc7QUFDSCxNQUFNLENBQUMsSUFBTSxzQkFBc0IsR0FBRyxVQUFDLElBQVk7SUFDbEQsT0FBTyxPQUFPLENBQUMsSUFBSSxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBQyxJQUFJLElBQUssT0FBQSxJQUFJLEtBQUssSUFBSSxDQUFDLEVBQUUsRUFBaEIsQ0FBZ0IsQ0FBQyxDQUFDLENBQUM7QUFDcEUsQ0FBQyxDQUFDO0FBRUY7Ozs7R0FJRztBQUNILE1BQU0sQ0FBQyxJQUFNLHNCQUFzQixHQUFHLFVBQUMsSUFBWTtJQUNsRCxPQUFPLE9BQU8sQ0FDYixJQUFJO1FBQ0gsU0FBUyxDQUFDLElBQUksQ0FDYixVQUFDLElBQUksSUFBSyxPQUFBLElBQUksS0FBSyxJQUFJLENBQUMsRUFBRSxJQUFJLElBQUksS0FBSyxJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksS0FBSyxJQUFJLENBQUMsR0FBRyxFQUExRCxDQUEwRCxDQUNwRSxDQUNGLENBQUM7QUFDSCxDQUFDLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxJQUFNLHNCQUFzQixHQUFHLFVBQUMsR0FBZ0I7O0lBQ3RELElBQU0sZUFBZSxHQUFhLEVBQUUsQ0FBQzs7UUFDckMsS0FBbUIsSUFBQSxjQUFBLFNBQUEsU0FBUyxDQUFBLG9DQUFBLDJEQUFFO1lBQXpCLElBQU0sSUFBSSxzQkFBQTtZQUNkLFFBQVEsR0FBRyxFQUFFO2dCQUNiLEtBQUssSUFBSTtvQkFDUixJQUFJLElBQUksQ0FBQyxFQUFFLEVBQUU7d0JBQ1osZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7cUJBQzlCO29CQUNELE1BQU07Z0JBQ1AsS0FBSyxJQUFJO29CQUNSLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO29CQUM5QixNQUFNO2FBQ047U0FDRDs7Ozs7Ozs7O0lBRUQsT0FBTyxlQUFlLENBQUM7QUFDeEIsQ0FBQyxDQUFDIiwiZmlsZSI6Imxhbmd1YWdlcy9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsYW5ndWFnZXMgZnJvbSAnLi9JU082MzlMYW5nQ29kZXNMaXN0JztcblxuLyoqXG4gKiBDaGVjayBpcyBzdHJpbmcgYXJlIDYzOS0xIGxhbmcgY29kZVxuICpcbiAqIFZhbHVlcyBhcmUgY2FzZSBzZW5zaXRpdmUsIGlmIHlvdSBuZWVkLCB5b3UgaGF2ZSB0byBjb252ZXJ0IHN0cmluZ3MgdG8gbG93ZXIgY2FzZSB0byBjaGVja1xuICovXG5leHBvcnQgY29uc3QgaXNMYW5ndWFnZUNvZGVJU082Mzl2MSA9IChjb2RlOiBzdHJpbmcpID0+IHtcblx0cmV0dXJuIEJvb2xlYW4oY29kZSAmJiBsYW5ndWFnZXMuc29tZSgobGFuZykgPT4gY29kZSA9PT0gbGFuZy52MSkpO1xufTtcblxuLyoqXG4gKiBDaGVjayBpcyBzdHJpbmcgYXJlIDYzOS0yIGxhbmcgY29kZVxuICpcbiAqIFZhbHVlcyBhcmUgY2FzZSBzZW5zaXRpdmUsIGlmIHlvdSBuZWVkLCB5b3UgaGF2ZSB0byBjb252ZXJ0IHN0cmluZ3MgdG8gbG93ZXIgY2FzZSB0byBjaGVja1xuICovXG5leHBvcnQgY29uc3QgaXNMYW5ndWFnZUNvZGVJU082Mzl2MiA9IChjb2RlOiBzdHJpbmcpID0+IHtcblx0cmV0dXJuIEJvb2xlYW4oXG5cdFx0Y29kZSAmJlxuXHRcdFx0bGFuZ3VhZ2VzLnNvbWUoXG5cdFx0XHRcdChsYW5nKSA9PiBjb2RlID09PSBsYW5nLnYyIHx8IGNvZGUgPT09IGxhbmcudjJCIHx8IGNvZGUgPT09IGxhbmcudjJULFxuXHRcdFx0KSxcblx0KTtcbn07XG5cbi8qKlxuICogUmV0dXJuIHN1YnNldCBvZiBJU08tNjM5IGxhbmcgY29kZXNcbiAqL1xuZXhwb3J0IGNvbnN0IGdldExhbmd1YWdlQ29kZXNJU082MzkgPSAoc2V0OiAndjEnIHwgJ3YyJykgPT4ge1xuXHRjb25zdCBwaWNrZWRMYW5ndWFnZXM6IHN0cmluZ1tdID0gW107XG5cdGZvciAoY29uc3QgbGFuZyBvZiBsYW5ndWFnZXMpIHtcblx0XHRzd2l0Y2ggKHNldCkge1xuXHRcdGNhc2UgJ3YxJzpcblx0XHRcdGlmIChsYW5nLnYxKSB7XG5cdFx0XHRcdHBpY2tlZExhbmd1YWdlcy5wdXNoKGxhbmcudjEpO1xuXHRcdFx0fVxuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAndjInOlxuXHRcdFx0cGlja2VkTGFuZ3VhZ2VzLnB1c2gobGFuZy52Mik7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcGlja2VkTGFuZ3VhZ2VzO1xufTtcbiJdfQ==
