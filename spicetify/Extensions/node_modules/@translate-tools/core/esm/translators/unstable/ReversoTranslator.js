var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import axios from 'axios';
import { BaseTranslator } from '../BaseTranslator';
/**
 * This module did not test too ago
 */
var ReversoTranslator = /** @class */ (function (_super) {
    __extends(ReversoTranslator, _super);
    function ReversoTranslator() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.langMap = {
            en: 'eng',
            ar: 'ara',
            nl: 'dut',
            he: 'heb',
            es: 'spa',
            it: 'ita',
            zh: 'chi',
            de: 'ger',
            pl: 'pol',
            pt: 'por',
            ro: 'rum',
            ru: 'rus',
            tr: 'tur',
            fr: 'fra',
            ja: 'jpn',
        };
        return _this;
    }
    ReversoTranslator.isSupportedAutoFrom = function () {
        return false;
    };
    ReversoTranslator.getSupportedLanguages = function () {
        // eslint-disable
        // prettier-ignore
        return [
            'en', 'ar', 'nl', 'he', 'es', 'it', 'zh', 'de', 'pl', 'pt',
            'ro', 'ru', 'tr', 'fr', 'ja',
        ];
        // eslint-enable
    };
    ReversoTranslator.prototype.getLengthLimit = function () {
        return 5000;
    };
    ReversoTranslator.prototype.getRequestsTimeout = function () {
        return 1000;
    };
    ReversoTranslator.prototype.checkLimitExceeding = function (text) {
        if (Array.isArray(text)) {
            var arrayLen = text.reduce(function (acc, text) { return acc + text.length; }, 0);
            var extra = arrayLen - this.getLengthLimit();
            return extra > 0 ? extra : 0;
        }
        else {
            var extra = text.length - this.getLengthLimit();
            return extra > 0 ? extra : 0;
        }
    };
    ReversoTranslator.prototype.translate = function (text, from, to) {
        var localFrom = this.langMap[from];
        var localTo = this.langMap[to];
        var data = {
            input: text,
            from: localFrom,
            to: localTo,
            format: 'text',
            options: {
                origin: 'translation.web',
                sentenceSplitter: true,
                contextResults: true,
                languageDetection: false,
            },
        };
        var apiHost = this.wrapUrlToCorsProxy('https://api.reverso.net/translate/v1/translation');
        return axios
            .post(apiHost, JSON.stringify(data), {
            withCredentials: false,
            headers: __assign({ 'Content-Type': 'application/json; charset=utf-8' }, this.options.headers),
        })
            .then(function (rsp) {
            var response = rsp.data;
            if (!(response instanceof Object) ||
                !(response.translation instanceof Array) ||
                response.translation.every(function (i) { return typeof i !== 'string'; })) {
                throw new Error('Unexpected response');
            }
            return response.translation.join('');
        });
    };
    ReversoTranslator.prototype.translateBatch = function (text, langFrom, langTo) {
        var _this = this;
        return Promise.all(text.map(function (text) { return _this.translate(text, langFrom, langTo); }));
    };
    ReversoTranslator.translatorName = 'ReversoTranslator (public)';
    return ReversoTranslator;
}(BaseTranslator));
export { ReversoTranslator };

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zbGF0b3JzL3Vuc3RhYmxlL1JldmVyc29UcmFuc2xhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBRTFCLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVuRDs7R0FFRztBQUNIO0lBQXVDLHFDQUFjO0lBQXJEO1FBQUEscUVBbUdDO1FBL0RRLGFBQU8sR0FBMkI7WUFDekMsRUFBRSxFQUFFLEtBQUs7WUFDVCxFQUFFLEVBQUUsS0FBSztZQUNULEVBQUUsRUFBRSxLQUFLO1lBQ1QsRUFBRSxFQUFFLEtBQUs7WUFDVCxFQUFFLEVBQUUsS0FBSztZQUNULEVBQUUsRUFBRSxLQUFLO1lBQ1QsRUFBRSxFQUFFLEtBQUs7WUFDVCxFQUFFLEVBQUUsS0FBSztZQUNULEVBQUUsRUFBRSxLQUFLO1lBQ1QsRUFBRSxFQUFFLEtBQUs7WUFDVCxFQUFFLEVBQUUsS0FBSztZQUNULEVBQUUsRUFBRSxLQUFLO1lBQ1QsRUFBRSxFQUFFLEtBQUs7WUFDVCxFQUFFLEVBQUUsS0FBSztZQUNULEVBQUUsRUFBRSxLQUFLO1NBQ1QsQ0FBQzs7SUErQ0gsQ0FBQztJQWhHYyxxQ0FBbUIsR0FBakM7UUFDQyxPQUFPLEtBQUssQ0FBQztJQUNkLENBQUM7SUFFYSx1Q0FBcUIsR0FBbkM7UUFDQyxpQkFBaUI7UUFDakIsa0JBQWtCO1FBQ2xCLE9BQU87WUFDTixJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJO1lBQzFELElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJO1NBQzVCLENBQUM7UUFDRixnQkFBZ0I7SUFDakIsQ0FBQztJQUVNLDBDQUFjLEdBQXJCO1FBQ0MsT0FBTyxJQUFJLENB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R0FBRyw0QkFBNEIsQ0FBQztJQWtHdEUsd0JBQUM7Q0FuR0QsQUFtR0MsQ0FuR3NDLGNBQWMsR0FtR3BEO1NBbkdZLGlCQUFpQiIsImZpbGUiOiJ0cmFuc2xhdG9ycy91bnN0YWJsZS9SZXZlcnNvVHJhbnNsYXRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBsYW5nQ29kZSB9IGZyb20gJy4uL1RyYW5zbGF0b3InO1xuaW1wb3J0IHsgQmFzZVRyYW5zbGF0b3IgfSBmcm9tICcuLi9CYXNlVHJhbnNsYXRvcic7XG5cbi8qKlxuICogVGhpcyBtb2R1bGUgZGlkIG5vdCB0ZXN0IHRvbyBhZ29cbiAqL1xuZXhwb3J0IGNsYXNzIFJldmVyc29UcmFuc2xhdG9yIGV4dGVuZHMgQmFzZVRyYW5zbGF0b3Ige1xuXHRwdWJsaWMgc3RhdGljIHJlYWRvbmx5IHRyYW5zbGF0b3JOYW1lID0gJ1JldmVyc29UcmFuc2xhdG9yIChwdWJsaWMpJztcblxuXHRwdWJsaWMgc3RhdGljIGlzU3VwcG9ydGVkQXV0b0Zyb20oKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cHVibGljIHN0YXRpYyBnZXRTdXBwb3J0ZWRMYW5ndWFnZXMoKTogbGFuZ0NvZGVbXSB7XG5cdFx0Ly8gZXNsaW50LWRpc2FibGVcblx0XHQvLyBwcmV0dGllci1pZ25vcmVcblx0XHRyZXR1cm4gW1xuXHRcdFx0J2VuJywgJ2FyJywgJ25sJywgJ2hlJywgJ2VzJywgJ2l0JywgJ3poJywgJ2RlJywgJ3BsJywgJ3B0Jyxcblx0XHRcdCdybycsICdydScsICd0cicsICdmcicsICdqYScsXG5cdFx0XTtcblx0XHQvLyBlc2xpbnQtZW5hYmxlXG5cdH1cblxuXHRwdWJsaWMgZ2V0TGVuZ3RoTGltaXQoKSB7XG5cdFx0cmV0dXJuIDUwMDA7XG5cdH1cblxuXHRwdWJsaWMgZ2V0UmVxdWVzdHNUaW1lb3V0KCkge1xuXHRcdHJldHVybiAxMDAwO1xuXHR9XG5cblx0cHVibGljIGNoZWNrTGltaXRFeGNlZWRpbmcodGV4dDogc3RyaW5nIHwgc3RyaW5nW10pIHtcblx0XHRpZiAoQXJyYXkuaXNBcnJheSh0ZXh0KSkge1xuXHRcdFx0Y29uc3QgYXJyYXlMZW4gPSB0ZXh0LnJlZHVjZSgoYWNjLCB0ZXh0KSA9PiBhY2MgKyB0ZXh0Lmxlbmd0aCwgMCk7XG5cdFx0XHRjb25zdCBleHRyYSA9IGFycmF5TGVuIC0gdGhpcy5nZXRMZW5ndGhMaW1pdCgpO1xuXHRcdFx0cmV0dXJuIGV4dHJhID4gMCA/IGV4dHJhIDogMDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc3QgZXh0cmEgPSB0ZXh0Lmxlbmd0aCAtIHRoaXMuZ2V0TGVuZ3RoTGltaXQoKTtcblx0XHRcdHJldHVybiBleHRyYSA+IDAgPyBleHRyYSA6IDA7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBsYW5nTWFwOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge1xuXHRcdGVuOiAnZW5nJyxcblx0XHRhcjogJ2FyYScsXG5cdFx0bmw6ICdkdXQnLFxuXHRcdGhlOiAnaGViJyxcblx0XHRlczogJ3NwYScsXG5cdFx0aXQ6ICdpdGEnLFxuXHRcdHpoOiAnY2hpJyxcblx0XHRkZTogJ2dlcicsXG5cdFx0cGw6ICdwb2wnLFxuXHRcdHB0OiAncG9yJyxcblx0XHRybzogJ3J1bScsXG5cdFx0cnU6ICdydXMnLFxuXHRcdHRyOiAndHVyJyxcblx0XHRmcjogJ2ZyYScsXG5cdFx0amE6ICdqcG4nLFxuXHR9O1xuXG5cdHB1YmxpYyB0cmFuc2xhdGUodGV4dDogc3RyaW5nLCBmcm9tOiBsYW5nQ29kZSwgdG86IGxhbmdDb2RlKSB7XG5cdFx0Y29uc3QgbG9jYWxGcm9tID0gdGhpcy5sYW5nTWFwW2Zyb21dO1xuXHRcdGNvbnN0IGxvY2FsVG8gPSB0aGlzLmxhbmdNYXBbdG9dO1xuXG5cdFx0Y29uc3QgZGF0YSA9IHtcblx0XHRcdGlucHV0OiB0ZXh0LFxuXHRcdFx0ZnJvbTogbG9jYWxGcm9tLFxuXHRcdFx0dG86IGxvY2FsVG8sXG5cdFx0XHRmb3JtYXQ6ICd0ZXh0Jyxcblx0XHRcdG9wdGlvbnM6IHtcblx0XHRcdFx0b3JpZ2luOiAndHJhbnNsYXRpb24ud2ViJyxcblx0XHRcdFx0c2VudGVuY2VTcGxpdHRlcjogdHJ1ZSxcblx0XHRcdFx0Y29udGV4dFJlc3VsdHM6IHRydWUsXG5cdFx0XHRcdGxhbmd1YWdlRGV0ZWN0aW9uOiBmYWxzZSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdGNvbnN0IGFwaUhvc3QgPSB0aGlzLndyYXBVcmxUb0NvcnNQcm94eShcblx0XHRcdCdodHRwczovL2FwaS5yZXZlcnNvLm5ldC90cmFuc2xhdGUvdjEvdHJhbnNsYXRpb24nLFxuXHRcdCk7XG5cdFx0cmV0dXJuIGF4aW9zXG5cdFx0XHQucG9zdChhcGlIb3N0LCBKU09OLnN0cmluZ2lmeShkYXRhKSwge1xuXHRcdFx0XHR3aXRoQ3JlZGVudGlhbHM6IGZhbHNlLFxuXHRcdFx0XHRoZWFkZXJzOiB7XG5cdFx0XHRcdFx0J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04Jyxcblx0XHRcdFx0XHQuLi50aGlzLm9wdGlvbnMuaGVhZGVycyxcblx0XHRcdFx0fSxcblx0XHRcdH0pXG5cdFx0XHQudGhlbigocnNwKSA9PiB7XG5cdFx0XHRcdGNvbnN0IHJlc3BvbnNlID0gcnNwLmRhdGEgYXMgYW55O1xuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0IShyZXNwb25zZSBpbnN0YW5jZW9mIE9iamVjdCkgfHxcblx0XHRcdFx0XHQhKHJlc3BvbnNlLnRyYW5zbGF0aW9uIGluc3RhbmNlb2YgQXJyYXkpIHx8XG5cdFx0XHRcdFx0cmVzcG9uc2UudHJhbnNsYXRpb24uZXZlcnkoKGk6IGFueSkgPT4gdHlwZW9mIGkgIT09ICdzdHJpbmcnKVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgcmVzcG9uc2UnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAocmVzcG9uc2UudHJhbnNsYXRpb24gYXMgc3RyaW5nW10pLmpvaW4oJycpO1xuXHRcdFx0fSk7XG5cdH1cblxuXHRwdWJsaWMgdHJhbnNsYXRlQmF0Y2godGV4dDogc3RyaW5nW10sIGxhbmdGcm9tOiBsYW5nQ29kZSwgbGFuZ1RvOiBsYW5nQ29kZSkge1xuXHRcdHJldHVybiBQcm9taXNlLmFsbCh0ZXh0Lm1hcCgodGV4dCkgPT4gdGhpcy50cmFuc2xhdGUodGV4dCwgbGFuZ0Zyb20sIGxhbmdUbykpKTtcblx0fVxufVxuIl19
