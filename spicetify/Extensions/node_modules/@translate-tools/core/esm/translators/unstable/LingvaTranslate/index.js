var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import axios from 'axios';
import { BaseTranslator } from '../../BaseTranslator';
// FIXME: translator fails the test `Translate many texts with "translateBatch"` - fix it or remove this translator
var LingvaTranslate = /** @class */ (function (_super) {
    __extends(LingvaTranslate, _super);
    function LingvaTranslate(options) {
        var _this = this;
        var _a;
        _this = _super.call(this, options) || this;
        _this.apiHost = (_a = options.apiHost) !== null && _a !== void 0 ? _a : 'https://translate.plausibility.cloud';
        return _this;
    }
    LingvaTranslate.getSupportedLanguages = function () {
        // eslint-disable
        // prettier-ignore
        return [
            "en", "ar", "az", "zh", "cs",
            "nl", "eo", "fi", "fr", "de",
            "el", "hi", "hu", "id", "ga",
            "it", "ja", "ko", "fa", "pl",
            "pt", "ru", "sk", "es", "sv",
            "tr", "uk", "vi"
        ];
        // eslint-enable
    };
    LingvaTranslate.prototype.getLengthLimit = function () {
        return 5000;
    };
    LingvaTranslate.prototype.getRequestsTimeout = function () {
        return 300;
    };
    LingvaTranslate.prototype.checkLimitExceeding = function (text) {
        if (Array.isArray(text)) {
            var arrayLen = text.reduce(function (acc, text) { return acc + text.length; }, 0);
            var extra = arrayLen - this.getLengthLimit();
            return extra > 0 ? extra : 0;
        }
        else {
            var extra = text.length - this.getLengthLimit();
            return extra > 0 ? extra : 0;
        }
    };
    LingvaTranslate.prototype.translate = function (text, from, to) {
        return __awaiter(this, void 0, void 0, function () {
            var requestUrl;
            return __generator(this, function (_a) {
                requestUrl = "".concat(this.apiHost, "/api/v1/").concat(encodeURIComponent(from), "/").concat(encodeURIComponent(to), "/").concat(encodeURIComponent(text));
                return [2 /*return*/, axios
                        .get(this.wrapUrlToCorsProxy(requestUrl), {
                        headers: __assign({ 'User-Agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:99.0) Gecko/20100101 Firefox/99.0', Accept: '*/*', 'Accept-Language': 'en-US,en;q=0.5', 'Sec-Fetch-Dest': 'empty', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Site': 'same-origin', 'Content-Type': 'application/x-www-form-urlencoded' }, this.options.headers),
                    })
                        .then(function (rsp) {
                        if (typeof rsp.data !== 'object' ||
                            rsp.data === null ||
                            typeof rsp.data.translation !== 'string') {
                            throw new TypeError('Unexpected data');
                        }
                        return rsp.data.translation;
                    })];
            });
        });
    };
    LingvaTranslate.prototype.translateBatch = function (texts, from, to) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, Promise.all(texts.map(function (text) { return _this.translate(text, from, to); }))];
            });
        });
    };
    LingvaTranslate.translatorName = 'LingvaTranslate';
    LingvaTranslate.isRequiredKey = function () { return false; };
    LingvaTranslate.isSupportedAutoFrom = function () { return true; };
    return LingvaTranslate;
}(BaseTranslator));
export { LingvaTranslate };

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zbGF0b3JzL3Vuc3RhYmxlL0xpbmd2YVRyYW5zbGF0ZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUcxQixPQUFPLEVBQUUsY0FBYyxFQUFxQixNQUFNLHNCQUFzQixDQUFDO0FBRXpFLG1IQUFtSDtBQUNuSDtJQUFxQyxtQ0FBYztJQXlCbEQseUJBQVksT0FBMEI7UUFBdEMsaUJBSUM7O2dCQUhBLGtCQUFNLE9BQU8sQ0FBQztRQUVkLEtBQUksQ0FBQyxPQUFPLEdBQUcsTUFBQSxPQUFPLENBQUMsT0FBTyxtQ0FBSSxzQ0FBc0MsQ0FBQzs7SUFDMUUsQ0FBQztJQXRCYSxxQ0FBcUIsR0FBbkM7UUFDQyxpQkFBaUI7UUFDakIsa0JBQWtCO1FBQ2xCLE9BQU87WUFDTixJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSTtZQUM1QixJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSTtZQUM1QixJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSTtZQUM1QixJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSTtZQUM1QixJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSTtZQUM1QixJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7U0FDaEIsQ0FBQztRQUNGLGdCQUFnQjtJQUNqQixDQUFDO0lBWU0sd0NBQWMsR0FBckI7UUFDQyxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFTSw0Q0FBa0IsR0FBekI7UUFDQyxPQUFPLEdBQUcsQ0FBQztJQUNaLENBQUM7SUFFTSw2Q0FBbUIsR0FBMUIsVUFBMkIsSUFBdUI7UUFDakQsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3hCLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBQyxHQUFHLEVBQUUsSUFBSSxJQUFLLE9BQUEsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQWpCLENBQWlCLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDbEUsSUFBTSxLQUFLLEdBQUcsUUFBUSxHQUFHLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUMvQyxPQUFPLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzdCO2FBQU07WUFDTixJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUNsRCxPQUFPLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzdCO0lBQ0YsQ0FBQztJQUVZLG1DQUFTLEdBQXRCLFVBQXVCLElBQVksRUFBRSxJQUFzQixFQUFFLEVBQVk7Ozs7Z0JBQ2xFLFVBQVUsR0FBRyxVQUFHLElBQUksQ0FBQyxPQUFPLHFCQUFXLGtCQUFrQixDQUM5RCxJQUFJLENBQ0osY0FBSSxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsY0FBSSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBRSxDQUFDO2dCQUMxRCxzQkFBTyxLQUFLO3lCQUNWLEdBQUcsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDLEVBQUU7d0JBQ3pDLE9BQU8sYUFDTixZQUFZLEVBQ1gsOEVBQThFLEVBQy9FLE1BQU0sRUFBRSxLQUFLLEVBQ2IsaUJBQWlCLEVBQUUsZ0JBQWdCLEVBQ25DLGdCQUFnQixFQUFFLE9BQU8sRUFDekIsZ0JBQWdCLEVBQUUsTUFBTSxFQUN4QixnQkFBZ0IsRUFBRSxhQUFhLEVBQy9CLGNBQWMsRUFBRSxtQ0FBbUMsSUFDaEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQ3ZCO3FCQUNELENBQUM7eUJBQ0QsSUFBSSxDQUFDLFVBQUMsR0FBRzt3QkFDVCxJQUNDLE9BQU8sR0FBRyxDQUFDLElBQUksS0FBSyxRQUFROzRCQUM1QixHQUFHLENBQUMsSUFBSSxLQUFLLElBQUk7NEJBQ2pCLE9BQVEsR0FBRyxDQUFDLElBQVksQ0FBQyxXQUFXLEtBQUssUUFBUSxFQUNoRDs0QkFDRCxNQUFNLElBQUksU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQUM7eUJBQ3ZDO3dCQUVELE9BQVEsR0FBRyxDQUFDLElBQVksQ0FBQyxXQUFxQixDQUFDO29CQUNoRCxDQUFDLENBQUMsRUFBQzs7O0tBQ0o7SUFFWSx3Q0FBYyxHQUEzQixVQUE0QixLQUFlLEVBQUUsSUFBc0IsRUFBRSxFQUFZOzs7O2dCQUNoRixzQkFBTyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBQyxJQUFJLElBQUssT0FBQSxLQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQTlCLENBQThCLENBQUMsQ0FBQyxFQUFDOzs7S0FDeEU7SUFsRnNCLDhCQUFjLEdBQUcsaUJBQWlCLENBQUM7SUFFNUMsNkJBQWEsR0FBRyxjQUFNLE9BQUEsS0FBSyxFQUFMLENBQUssQ0FBQztJQUU1QixtQ0FBbUIsR0FBRyxjQUFNLE9BQUEsSUFBSSxFQUFKLENBQUksQ0FBQztJQStFaEQsc0JBQUM7Q0FwRkQsQUFvRkMsQ0FwRm9DLGNBQWMsR0FvRmxEO1NBcEZZLGVBQWUiLCJmaWxlIjoidHJhbnNsYXRvcnMvdW5zdGFibGUvTGluZ3ZhVHJhbnNsYXRlL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcblxuaW1wb3J0IHsgbGFuZ0NvZGUsIGxhbmdDb2RlV2l0aEF1dG8gfSBmcm9tICcuLi8uLi9UcmFuc2xhdG9yJztcbmltcG9ydCB7IEJhc2VUcmFuc2xhdG9yLCBUcmFuc2xhdG9yT3B0aW9ucyB9IGZyb20gJy4uLy4uL0Jhc2VUcmFuc2xhdG9yJztcblxuLy8gRklYTUU6IHRyYW5zbGF0b3IgZmFpbHMgdGhlIHRlc3QgYFRyYW5zbGF0ZSBtYW55IHRleHRzIHdpdGggXCJ0cmFuc2xhdGVCYXRjaFwiYCAtIGZpeCBpdCBvciByZW1vdmUgdGhpcyB0cmFuc2xhdG9yXG5leHBvcnQgY2xhc3MgTGluZ3ZhVHJhbnNsYXRlIGV4dGVuZHMgQmFzZVRyYW5zbGF0b3Ige1xuXHRwdWJsaWMgc3RhdGljIHJlYWRvbmx5IHRyYW5zbGF0b3JOYW1lID0gJ0xpbmd2YVRyYW5zbGF0ZSc7XG5cblx0cHVibGljIHN0YXRpYyBpc1JlcXVpcmVkS2V5ID0gKCkgPT4gZmFsc2U7XG5cblx0cHVibGljIHN0YXRpYyBpc1N1cHBvcnRlZEF1dG9Gcm9tID0gKCkgPT4gdHJ1ZTtcblxuXHRwdWJsaWMgc3RhdGljIGdldFN1cHBvcnRlZExhbmd1YWdlcygpOiBsYW5nQ29kZVtdIHtcblx0XHQvLyBlc2xpbnQtZGlzYWJsZVxuXHRcdC8vIHByZXR0aWVyLWlnbm9yZVxuXHRcdHJldHVybiBbXG5cdFx0XHRcImVuXCIsIFwiYXJcIiwgXCJhelwiLCBcInpoXCIsIFwiY3NcIixcblx0XHRcdFwibmxcIiwgXCJlb1wiLCBcImZpXCIsIFwiZnJcIiwgXCJkZVwiLFxuXHRcdFx0XCJlbFwiLCBcImhpXCIsIFwiaHVcIiwgXCJpZFwiLCBcImdhXCIsXG5cdFx0XHRcIml0XCIsIFwiamFcIiwgXCJrb1wiLCBcImZhXCIsIFwicGxcIixcblx0XHRcdFwicHRcIiwgXCJydVwiLCBcInNrXCIsIFwiZXNcIiwgXCJzdlwiLFxuXHRcdFx0XCJ0clwiLCBcInVrXCIsIFwidmlcIlxuXHRcdF07XG5cdFx0Ly8gZXNsaW50LWVuYWJsZVxuXHR9XG5cblx0Ly8gVVJMIG9mIHlvdXIgaW5zdGFuY2UsIGxvb2sgYXQgaHR0cHM6Ly9naXRodWIuY29tL3RoZWRhdmlkZGVsdGEvbGluZ3ZhLXRyYW5zbGF0ZSNpbnN0YW5jZXNcblx0Ly8gZm9yIGxvY2FsIGluc3RhbmNlIHVzZSBVUkwgXCJodHRwOi8vbG9jYWxob3N0OjMwMDBcIlxuXHRwcml2YXRlIHJlYWRvbmx5IGFwaUhvc3Q7XG5cblx0Y29uc3RydWN0b3Iob3B0aW9uczogVHJhbnNsYXRvck9wdGlvbnMpIHtcblx0XHRzdXBlcihvcHRpb25zKTtcblxuXHRcdHRoaXMuYXBpSG9zdCA9IG9wdGlvbnMuYXBpSG9zdCA/PyAnaHR0cHM6Ly90cmFuc2xhdGUucGxhdXNpYmlsaXR5LmNsb3VkJztcblx0fVxuXG5cdHB1YmxpYyBnZXRMZW5ndGhMaW1pdCgpIHtcblx0XHRyZXR1cm4gNTAwMDtcblx0fVxuXG5cdHB1YmxpYyBnZXRSZXF1ZXN0c1RpbWVvdXQoKSB7XG5cdFx0cmV0dXJuIDMwMDtcblx0fVxuXG5cdHB1YmxpYyBjaGVja0xpbWl0RXhjZWVkaW5nKHRleHQ6IHN0cmluZyB8IHN0cmluZ1tdKSB7XG5cdFx0aWYgKEFycmF5LmlzQXJyYXkodGV4dCkpIHtcblx0XHRcdGNvbnN0IGFycmF5TGVuID0gdGV4dC5yZWR1Y2UoKGFjYywgdGV4dCkgPT4gYWNjICsgdGV4dC5sZW5ndGgsIDApO1xuXHRcdFx0Y29uc3QgZXh0cmEgPSBhcnJheUxlbiAtIHRoaXMuZ2V0TGVuZ3RoTGltaXQoKTtcblx0XHRcdHJldHVybiBleHRyYSA+IDAgPyBleHRyYSA6IDA7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnN0IGV4dHJhID0gdGV4dC5sZW5ndGggLSB0aGlzLmdldExlbmd0aExpbWl0KCk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPiAwID8gZXh0cmEgOiAwO1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyBhc3luYyB0cmFuc2xhdGUodGV4dDogc3RyaW5nLCBmcm9tOiBsYW5nQ29kZVdpdGhBdXRvLCB0bzogbGFuZ0NvZGUpIHtcblx0XHRjb25zdCByZXF1ZXN0VXJsID0gYCR7dGhpcy5hcGlIb3N0fS9hcGkvdjEvJHtlbmNvZGVVUklDb21wb25lbnQoXG5cdFx0XHRmcm9tLFxuXHRcdCl9LyR7ZW5jb2RlVVJJQ29tcG9uZW50KHRvKX0vJHtlbmNvZGVVUklDb21wb25lbnQodGV4dCl9YDtcblx0XHRyZXR1cm4gYXhpb3Ncblx0XHRcdC5nZXQodGhpcy53cmFwVXJsVG9Db3JzUHJveHkocmVxdWVzdFVybCksIHtcblx0XHRcdFx0aGVhZGVyczoge1xuXHRcdFx0XHRcdCdVc2VyLUFnZW50Jzpcblx0XHRcdFx0XHRcdCdNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6OTkuMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC85OS4wJyxcblx0XHRcdFx0XHRBY2NlcHQ6ICcqLyonLFxuXHRcdFx0XHRcdCdBY2NlcHQtTGFuZ3VhZ2UnOiAnZW4tVVMsZW47cT0wLjUnLFxuXHRcdFx0XHRcdCdTZWMtRmV0Y2gtRGVzdCc6ICdlbXB0eScsXG5cdFx0XHRcdFx0J1NlYy1GZXRjaC1Nb2RlJzogJ2NvcnMnLFxuXHRcdFx0XHRcdCdTZWMtRmV0Y2gtU2l0ZSc6ICdzYW1lLW9yaWdpbicsXG5cdFx0XHRcdFx0J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLFxuXHRcdFx0XHRcdC4uLnRoaXMub3B0aW9ucy5oZWFkZXJzLFxuXHRcdFx0XHR9LFxuXHRcdFx0fSlcblx0XHRcdC50aGVuKChyc3ApID0+IHtcblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHR5cGVvZiByc3AuZGF0YSAhPT0gJ29iamVjdCcgfHxcblx0XHRcdFx0XHRyc3AuZGF0YSA9PT0gbnVsbCB8fFxuXHRcdFx0XHRcdHR5cGVvZiAocnNwLmRhdGEgYXMgYW55KS50cmFuc2xhdGlvbiAhPT0gJ3N0cmluZydcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignVW5leHBlY3RlZCBkYXRhJyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gKHJzcC5kYXRhIGFzIGFueSkudHJhbnNsYXRpb24gYXMgc3RyaW5nO1xuXHRcdFx0fSk7XG5cdH1cblxuXHRwdWJsaWMgYXN5bmMgdHJhbnNsYXRlQmF0Y2godGV4dHM6IHN0cmluZ1tdLCBmcm9tOiBsYW5nQ29kZVdpdGhBdXRvLCB0bzogbGFuZ0NvZGUpIHtcblx0XHRyZXR1cm4gUHJvbWlzZS5hbGwodGV4dHMubWFwKCh0ZXh0KSA9PiB0aGlzLnRyYW5zbGF0ZSh0ZXh0LCBmcm9tLCB0bykpKTtcblx0fVxufVxuIl19
