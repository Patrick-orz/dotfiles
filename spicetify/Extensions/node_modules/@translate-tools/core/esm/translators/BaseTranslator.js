// TODO: remove it and provide utils to implement translators
/**
 * Basic abstract class for translator
 */
var BaseTranslator = /** @class */ (function () {
    function BaseTranslator(options) {
        var _this = this;
        this.options = {};
        /**
         * Util to wrap url to CORS proxy
         */
        this.wrapUrlToCorsProxy = function (url) {
            // Use as prefix
            if (typeof _this.options.corsProxy === 'string') {
                return _this.options.corsProxy + url;
            }
            // Run user defined transformation
            if (typeof _this.options.corsProxy === 'function') {
                return _this.options.corsProxy(url);
            }
            return url;
        };
        if (options !== undefined) {
            this.options = options;
        }
    }
    BaseTranslator.prototype.checkLimitExceeding = function (text) {
        var plainText = Array.isArray(text) ? text.join('') : text;
        var extra = plainText.length - this.getLengthLimit();
        return extra > 0 ? extra : 0;
    };
    BaseTranslator.translatorName = 'UnknownTranslator';
    BaseTranslator.isRequiredKey = function () { return false; };
    BaseTranslator.isSupportedAutoFrom = function () { return false; };
    BaseTranslator.getSupportedLanguages = function () { return []; };
    return BaseTranslator;
}());
export { BaseTranslator };

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zbGF0b3JzL0Jhc2VUcmFuc2xhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXVDQSw2REFBNkQ7QUFDN0Q7O0dBRUc7QUFFSDtJQWdCQyx3QkFBWSxPQUE4QjtRQUExQyxpQkFJQztRQUxrQixZQUFPLEdBQUcsRUFBMEIsQ0FBQztRQXlCeEQ7O1dBRUc7UUFDTyx1QkFBa0IsR0FBRyxVQUFDLEdBQVc7WUFDMUMsZ0JBQWdCO1lBQ2hCLElBQUksT0FBTyxLQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsS0FBSyxRQUFRLEVBQUU7Z0JBQy9DLE9BQU8sS0FBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDO2FBQ3BDO1lBRUQsa0NBQWtDO1lBQ2xDLElBQUksT0FBTyxLQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsS0FBSyxVQUFVLEVBQUU7Z0JBQ2pELE9BQU8sS0FBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDbkM7WUFFRCxPQUFPLEdBQUcsQ0FBQztRQUNaLENBQUMsQ0FBQztRQXRDRCxJQUFJLE9BQU8sS0FBSyxTQUFTLEVBQUU7WUFDMUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7U0FDdkI7SUFDRixDQUFDO0lBY00sNENBQW1CLEdBQTFCLFVBQTJCLElBQXVCO1FBQ2pELElBQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUM3RCxJQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN2RCxPQUFPLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFuQ3NCLDZCQUFjLEdBQVcsbUJBQW1CLENBQUM7SUFFdEQsNEJBQWEsR0FBRyxjQUFNLE9BQUEsS0FBSyxFQUFMLENBQUssQ0FBQztJQUU1QixrQ0FBbUIsR0FBRyxjQUFNLE9BQUEsS0FBSyxFQUFMLENBQUssQ0FBQztJQUVsQyxvQ0FBcUIsR0FBRyxjQUFrQixPQUFBLEVBQUUsRUFBRixDQUFFLENBQUM7SUErQzVELHFCQUFDO0NBeERELEFBd0RDLElBQUE7U0F4RHFCLGNBQWMiLCJmaWxlIjoidHJhbnNsYXRvcnMvQmFzZVRyYW5zbGF0b3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUcmFuc2xhdG9ySW5zdGFuY2VNZW1iZXJzLCBsYW5nQ29kZSwgbGFuZ0NvZGVXaXRoQXV0byB9IGZyb20gJy4vVHJhbnNsYXRvcic7XG5cbmV4cG9ydCB0eXBlIENvcnNQcm94eSA9IHN0cmluZyB8ICgodXJsOiBzdHJpbmcpID0+IHN0cmluZyk7XG5cbmV4cG9ydCB0eXBlIFRyYW5zbGF0b3JPcHRpb25zPE8gZXh0ZW5kcyBSZWNvcmQ8YW55LCBhbnk+ID0ge30+ID0gTyAmIHtcblx0LyoqXG5cdCAqIEFQSSBlbmRwb2ludCBVUkxcblx0ICovXG5cdGFwaUhvc3Q/OiBzdHJpbmc7XG5cblx0LyoqXG5cdCAqIEFjY2VzcyBrZXkgZm9yIHJlcXVlc3RzIHRvIHRyYW5zbGF0b3IgQVBJXG5cdCAqL1xuXHRhcGlLZXk/OiBzdHJpbmc7XG5cblx0LyoqXG5cdCAqIFVuaW9uIHRleHQgYXJyYXkgdG8gMSByZXF1ZXN0IChvciBtb3JlLCBidXQgbGVzcyB0aGFuIHVzdWFseSBhbnl3YXkpLlxuXHQgKlxuXHQgKiBPcHRpb24gZm9yIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHJlcXVlc3RzLCBidXQgaXQgY2FuIG1ha2UgYXJ0ZWZhY3RzIGluIHRyYW5zbGF0ZWQgdGV4dC5cblx0ICpcblx0ICogU29tZSBtb2R1bGVzIG1heSBub3Qgc3VwcG9ydCB0aGlzIGZlYXR1cmUuXG5cdCAqL1xuXHR1c2VNdWx0aXBsZXhpbmc/OiBib29sZWFuO1xuXG5cdC8qKlxuXHQgKiBBZGRpdGlvbmFsIGhlYWRlcnMgZm9yIHJlcXVlc3RzXG5cdCAqL1xuXHRoZWFkZXJzPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcblxuXHQvKipcblx0ICogUHJveHkgcHJlZml4IG9yIHRyYW5zZm9ybSBmdW5jdGlvbiB3aGljaCByZXR1cm4gdXJsIHdpdGggQ09SUyBwcm94eVxuXHQgKlxuXHQgKiBDT1JTIHByb3h5IHVzZWZ1bCB0byBhdm9pZCBDT1JTIGVycm9yIGluIGJyb3dzZXIgb3IgdG8gbWFzayBzZXJ2ZXIgcmVxdWVzdHMgYXMgYnJvd3NlciByZXF1ZXN0cy5cblx0ICpcblx0ICogQWxsIHJlcXVlc3RzIHdpbGwgc2VuZCB0aHJvdWdoIHRoaXMgcHJveHkgc2VydmVyIGFuZCB0aGlzIHNlcnZlciB3aWxsIG1vZGlmeSBoZWFkZXJzXG5cdCAqL1xuXHRjb3JzUHJveHk/OiBDb3JzUHJveHk7XG59O1xuXG4vLyBUT0RPOiByZW1vdmUgaXQgYW5kIHByb3ZpZGUgdXRpbHMgdG8gaW1wbGVtZW50IHRyYW5zbGF0b3JzXG4vKipcbiAqIEJhc2ljIGFic3RyYWN0IGNsYXNzIGZvciB0cmFuc2xhdG9yXG4gKi9cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VUcmFuc2xhdG9yPEMgZXh0ZW5kcyBSZWNvcmQ8YW55LCBhbnk+ID0ge30+XG5pbXBsZW1lbnRzIFRyYW5zbGF0b3JJbnN0YW5jZU1lbWJlcnNcbntcblx0cHVibGljIHN0YXRpYyByZWFkb25seSB0cmFuc2xhdG9yTmFtZTogc3RyaW5nID0gJ1Vua25vd25UcmFuc2xhdG9yJztcblxuXHRwdWJsaWMgc3RhdGljIGlzUmVxdWlyZWRLZXkgPSAoKSA9PiBmYWxzZTtcblxuXHRwdWJsaWMgc3RhdGljIGlzU3VwcG9ydGVkQXV0b0Zyb20gPSAoKSA9PiBmYWxzZTtcblxuXHRwdWJsaWMgc3RhdGljIGdldFN1cHBvcnRlZExhbmd1YWdlcyA9ICgpOiBsYW5nQ29kZVtdID0+IFtdO1xuXG5cdHB1YmxpYyBhYnN0cmFjdCBnZXRMZW5ndGhMaW1pdCgpOiBudW1iZXI7XG5cblx0cHVibGljIGFic3RyYWN0IGdldFJlcXVlc3RzVGltZW91dCgpOiBudW1iZXI7XG5cblx0cHJvdGVjdGVkIHJlYWRvbmx5IG9wdGlvbnMgPSB7fSBhcyBUcmFuc2xhdG9yT3B0aW9uczxDPjtcblx0Y29uc3RydWN0b3Iob3B0aW9ucz86IFRyYW5zbGF0b3JPcHRpb25zPEM+KSB7XG5cdFx0aWYgKG9wdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR9XG5cdH1cblxuXHRhYnN0cmFjdCB0cmFuc2xhdGUoXG5cdFx0dGV4dDogc3RyaW5nLFxuXHRcdGxhbmdGcm9tOiBsYW5nQ29kZVdpdGhBdXRvLFxuXHRcdGxhbmdUbzogbGFuZ0NvZGUsXG5cdCk6IFByb21pc2U8c3RyaW5nPjtcblxuXHRhYnN0cmFjdCB0cmFuc2xhdGVCYXRjaChcblx0XHR0ZXh0OiBzdHJpbmdbXSxcblx0XHRsYW5nRnJvbTogbGFuZ0NvZGVXaXRoQXV0byxcblx0XHRsYW5nVG86IGxhbmdDb2RlLFxuXHQpOiBQcm9taXNlPEFycmF5PHN0cmluZyB8IG51bGw+PjtcblxuXHRwdWJsaWMgY2hlY2tMaW1pdEV4Y2VlZGluZyh0ZXh0OiBzdHJpbmcgfCBzdHJpbmdbXSkge1xuXHRcdGNvbnN0IHBsYWluVGV4dCA9IEFycmF5LmlzQXJyYXkodGV4dCkgPyB0ZXh0LmpvaW4oJycpIDogdGV4dDtcblx0XHRjb25zdCBleHRyYSA9IHBsYWluVGV4dC5sZW5ndGggLSB0aGlzLmdldExlbmd0aExpbWl0KCk7XG5cdFx0cmV0dXJuIGV4dHJhID4gMCA/IGV4dHJhIDogMDtcblx0fVxuXG5cdC8qKlxuXHQgKiBVdGlsIHRvIHdyYXAgdXJsIHRvIENPUlMgcHJveHlcblx0ICovXG5cdHByb3RlY3RlZCB3cmFwVXJsVG9Db3JzUHJveHkgPSAodXJsOiBzdHJpbmcpID0+IHtcblx0XHQvLyBVc2UgYXMgcHJlZml4XG5cdFx0aWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMuY29yc1Byb3h5ID09PSAnc3RyaW5nJykge1xuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9ucy5jb3JzUHJveHkgKyB1cmw7XG5cdFx0fVxuXG5cdFx0Ly8gUnVuIHVzZXIgZGVmaW5lZCB0cmFuc2Zvcm1hdGlvblxuXHRcdGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLmNvcnNQcm94eSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9ucy5jb3JzUHJveHkodXJsKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdXJsO1xuXHR9O1xufVxuIl19
