/**
 * Util for pack multiple requests to one
 *
 * It's just encode/decode all texts with custom separation options
 */
var Multiplexor = /** @class */ (function () {
    // private readonly token: Array<Array<string>> = [];
    function Multiplexor(options) {
        this.options = {
            tokenStart: '<',
            tokenEnd: '>',
            tokenClose: '/',
        };
        if (options !== undefined) {
            ['tokenStart', 'tokenEnd', 'tokenClose'].forEach(function (key) {
                var item = options[key];
                if (item !== undefined && item.search(/\&|\:/) !== -1) {
                    throw new Error("Option ".concat(key, " has disallow characters (& or :)"));
                }
            });
            for (var key in options) {
                this.options[key] = options[key];
            }
        }
    }
    Multiplexor.prototype.encode = function (data) {
        var _this = this;
        var _a = this.options, _b = _a.tokenStart, start = _b === void 0 ? '' : _b, _c = _a.tokenEnd, end = _c === void 0 ? '' : _c, _d = _a.tokenClose, close = _d === void 0 ? '' : _d;
        return data
            .map(function (_a) {
            var id = _a.id, text = _a.text;
            return start + id + end + _this.escape(text) + start + close + id + end;
        })
            .join(' ');
    };
    Multiplexor.prototype.decode = function (text) {
        var _a = this.options, _b = _a.tokenStart, start = _b === void 0 ? '' : _b, _c = _a.tokenEnd, end = _c === void 0 ? '' : _c, _d = _a.tokenClose, close = _d === void 0 ? '' : _d;
        var pattern = "".concat(start, "\\s*(\\d+)\\s*").concat(end, "([\\w\\W]+?)").concat(start, "\\s*").concat(close, "\\s*\\1\\s*").concat(end);
        var matchSet = text.matchAll(new RegExp(pattern, 'gm'));
        var result = [];
        var match = matchSet.next();
        while (!match.done) {
            result.push({
                id: match.value[1],
                text: this.unescape(match.value[2]),
            });
            match = matchSet.next();
        }
        return result;
    };
    Multiplexor.prototype.escape = function (text) {
        var _this = this;
        ['tokenStart', 'tokenEnd', 'tokenClose'].forEach(function (key, index) {
            var token = _this.options[key];
            if (token.length > 0) {
                text = text.replace(new RegExp(_this.escapeRegExp(token), 'g'), "&".concat(index + 1, ":"));
            }
        });
        return text;
    };
    Multiplexor.prototype.unescape = function (text) {
        var _this = this;
        ['tokenStart', 'tokenEnd', 'tokenClose'].forEach(function (key, index) {
            var token = _this.options[key];
            if (token.length > 0) {
                text = text.replace(new RegExp("&".concat(index + 1, ":"), 'g'), token);
            }
        });
        return text;
    };
    Multiplexor.prototype.escapeRegExp = function (text) {
        return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
    };
    return Multiplexor;
}());
export { Multiplexor };

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzL011bHRpcGxleG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVdBOzs7O0dBSUc7QUFDSDtJQU9DLHFEQUFxRDtJQUNyRCxxQkFBWSxPQUFpQjtRQVBaLFlBQU8sR0FBWTtZQUNuQyxVQUFVLEVBQUUsR0FBRztZQUNmLFFBQVEsRUFBRSxHQUFHO1lBQ2IsVUFBVSxFQUFFLEdBQUc7U0FDZixDQUFDO1FBSUQsSUFBSSxPQUFPLEtBQUssU0FBUyxFQUFFO1lBQzFCLENBQUMsWUFBWSxFQUFFLFVBQVUsRUFBRSxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxHQUFHO2dCQUNwRCxJQUFNLElBQUksR0FBSSxPQUFlLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ25DLElBQUksSUFBSSxLQUFLLFNBQVMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO29CQUN0RCxNQUFNLElBQUksS0FBSyxDQUFDLGlCQUFVLEdBQUcsc0NBQW1DLENBQUMsQ0FBQztpQkFDbEU7WUFDRixDQUFDLENBQUMsQ0FBQztZQUVILEtBQUssSUFBTSxHQUFHLElBQUksT0FBTyxFQUFFO2dCQUN6QixJQUFJLENBQUMsT0FBZSxDQUFDLEdBQUcsQ0FBQyxHQUFJLE9BQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNuRDtTQUNEO0lBQ0YsQ0FBQztJQUVNLDRCQUFNLEdBQWIsVUFBYyxJQUFxQjtRQUFuQyxpQkFhQztRQVpNLElBQUEsS0FJRixJQUFJLENBQUMsT0FBTyxFQUhmLGtCQUFzQixFQUFWLEtBQUssbUJBQUcsRUFBRSxLQUFBLEVBQ3RCLGdCQUFrQixFQUFSLEdBQUcsbUJBQUcsRUFBRSxLQUFBLEVBQ2xCLGtCQUFzQixFQUFWLEtBQUssbUJBQUcsRUFBRSxLQUNQLENBQUM7UUFFakIsT0FBTyxJQUFJO2FBQ1QsR0FBRyxDQUNILFVBQUMsRUFBWTtnQkFBVixFQUFFLFFBQUEsRUFBRSxJQUFJLFVBQUE7WUFD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bGV4b3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbnRlcmZhY2UgT3B0aW9ucyB7XG5cdHRva2VuU3RhcnQ/OiBzdHJpbmc7XG5cdHRva2VuRW5kPzogc3RyaW5nO1xuXHR0b2tlbkNsb3NlPzogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgVGV4dENvbnRhaW5lciB7XG5cdGlkOiBzdHJpbmc7XG5cdHRleHQ6IHN0cmluZztcbn1cblxuLyoqXG4gKiBVdGlsIGZvciBwYWNrIG11bHRpcGxlIHJlcXVlc3RzIHRvIG9uZVxuICpcbiAqIEl0J3MganVzdCBlbmNvZGUvZGVjb2RlIGFsbCB0ZXh0cyB3aXRoIGN1c3RvbSBzZXBhcmF0aW9uIG9wdGlvbnNcbiAqL1xuZXhwb3J0IGNsYXNzIE11bHRpcGxleG9yIHtcblx0cHJpdmF0ZSByZWFkb25seSBvcHRpb25zOiBPcHRpb25zID0ge1xuXHRcdHRva2VuU3RhcnQ6ICc8Jyxcblx0XHR0b2tlbkVuZDogJz4nLFxuXHRcdHRva2VuQ2xvc2U6ICcvJyxcblx0fTtcblxuXHQvLyBwcml2YXRlIHJlYWRvbmx5IHRva2VuOiBBcnJheTxBcnJheTxzdHJpbmc+PiA9IFtdO1xuXHRjb25zdHJ1Y3RvcihvcHRpb25zPzogT3B0aW9ucykge1xuXHRcdGlmIChvcHRpb25zICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFsndG9rZW5TdGFydCcsICd0b2tlbkVuZCcsICd0b2tlbkNsb3NlJ10uZm9yRWFjaCgoa2V5KSA9PiB7XG5cdFx0XHRcdGNvbnN0IGl0ZW0gPSAob3B0aW9ucyBhcyBhbnkpW2tleV07XG5cdFx0XHRcdGlmIChpdGVtICE9PSB1bmRlZmluZWQgJiYgaXRlbS5zZWFyY2goL1xcJnxcXDovKSAhPT0gLTEpIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYE9wdGlvbiAke2tleX0gaGFzIGRpc2FsbG93IGNoYXJhY3RlcnMgKCYgb3IgOilgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdGZvciAoY29uc3Qga2V5IGluIG9wdGlvbnMpIHtcblx0XHRcdFx0KHRoaXMub3B0aW9ucyBhcyBhbnkpW2tleV0gPSAob3B0aW9ucyBhcyBhbnkpW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cHVibGljIGVuY29kZShkYXRhOiBUZXh0Q29udGFpbmVyW10pIHtcblx0XHRjb25zdCB7XG5cdFx0XHR0b2tlblN0YXJ0OiBzdGFydCA9ICcnLFxuXHRcdFx0dG9rZW5FbmQ6IGVuZCA9ICcnLFxuXHRcdFx0dG9rZW5DbG9zZTogY2xvc2UgPSAnJyxcblx0XHR9ID0gdGhpcy5vcHRpb25zO1xuXG5cdFx0cmV0dXJuIGRhdGFcblx0XHRcdC5tYXAoXG5cdFx0XHRcdCh7IGlkLCB0ZXh0IH0pID0+XG5cdFx0XHRcdFx0c3RhcnQgKyBpZCArIGVuZCArIHRoaXMuZXNjYXBlKHRleHQpICsgc3RhcnQgKyBjbG9zZSArIGlkICsgZW5kLFxuXHRcdFx0KVxuXHRcdFx0LmpvaW4oJyAnKTtcblx0fVxuXG5cdHB1YmxpYyBkZWNvZGUodGV4dDogc3RyaW5nKSB7XG5cdFx0Y29uc3Qge1xuXHRcdFx0dG9rZW5TdGFydDogc3RhcnQgPSAnJyxcblx0XHRcdHRva2VuRW5kOiBlbmQgPSAnJyxcblx0XHRcdHRva2VuQ2xvc2U6IGNsb3NlID0gJycsXG5cdFx0fSA9IHRoaXMub3B0aW9ucztcblxuXHRcdGNvbnN0IHBhdHRlcm4gPSBgJHtzdGFydH1cXFxccyooXFxcXGQrKVxcXFxzKiR7ZW5kfShbXFxcXHdcXFxcV10rPykke3N0YXJ0fVxcXFxzKiR7Y2xvc2V9XFxcXHMqXFxcXDFcXFxccyoke2VuZH1gO1xuXHRcdGNvbnN0IG1hdGNoU2V0ID0gdGV4dC5tYXRjaEFsbChuZXcgUmVnRXhwKHBhdHRlcm4sICdnbScpKTtcblxuXHRcdGNvbnN0IHJlc3VsdCA9IFtdO1xuXHRcdGxldCBtYXRjaCA9IG1hdGNoU2V0Lm5leHQoKTtcblx0XHR3aGlsZSAoIW1hdGNoLmRvbmUpIHtcblx0XHRcdHJlc3VsdC5wdXNoKHtcblx0XHRcdFx0aWQ6IG1hdGNoLnZhbHVlWzFdLFxuXHRcdFx0XHR0ZXh0OiB0aGlzLnVuZXNjYXBlKG1hdGNoLnZhbHVlWzJdKSxcblx0XHRcdH0pO1xuXHRcdFx0bWF0Y2ggPSBtYXRjaFNldC5uZXh0KCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdHByaXZhdGUgZXNjYXBlKHRleHQ6IHN0cmluZykge1xuXHRcdFsndG9rZW5TdGFydCcsICd0b2tlbkVuZCcsICd0b2tlbkNsb3NlJ10uZm9yRWFjaCgoa2V5LCBpbmRleCkgPT4ge1xuXHRcdFx0Y29uc3QgdG9rZW4gPSAodGhpcy5vcHRpb25zIGFzIGFueSlba2V5XTtcblx0XHRcdGlmICh0b2tlbi5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoXG5cdFx0XHRcdFx0bmV3IFJlZ0V4cCh0aGlzLmVzY2FwZVJlZ0V4cCh0b2tlbiksICdnJyksXG5cdFx0XHRcdFx0YCYke2luZGV4ICsgMX06YCxcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHJldHVybiB0ZXh0O1xuXHR9XG5cblx0cHJpdmF0ZSB1bmVzY2FwZSh0ZXh0OiBzdHJpbmcpIHtcblx0XHRbJ3Rva2VuU3RhcnQnLCAndG9rZW5FbmQnLCAndG9rZW5DbG9zZSddLmZvckVhY2goKGtleSwgaW5kZXgpID0+IHtcblx0XHRcdGNvbnN0IHRva2VuID0gKHRoaXMub3B0aW9ucyBhcyBhbnkpW2tleV07XG5cdFx0XHRpZiAodG9rZW4ubGVuZ3RoID4gMCkge1xuXHRcdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKG5ldyBSZWdFeHAoYCYke2luZGV4ICsgMX06YCwgJ2cnKSwgdG9rZW4pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIHRleHQ7XG5cdH1cblxuXHRwcml2YXRlIGVzY2FwZVJlZ0V4cCh0ZXh0OiBzdHJpbmcpIHtcblx0XHRyZXR1cm4gdGV4dC5yZXBsYWNlKC9bLVtcXF17fSgpKis/LixcXFxcXiR8I1xcc10vZywgJ1xcXFwkJicpO1xuXHR9XG59XG4iXX0=
