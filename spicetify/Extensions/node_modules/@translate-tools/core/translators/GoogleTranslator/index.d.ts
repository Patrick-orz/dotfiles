import { langCode, langCodeWithAuto } from '../Translator';
import { BaseTranslator } from '../BaseTranslator';
/**
 * Raw languages array
 */
export declare const supportedLanguages: string[];
/**
 * Common class for google translator implementations
 */
export declare abstract class AbstractGoogleTranslator extends BaseTranslator {
    static isSupportedAutoFrom(): boolean;
    static getSupportedLanguages(): langCode[];
    getLengthLimit(): number;
    getRequestsTimeout(): number;
    /**
     * Map ISO lang codes to google translator lang codes
     */
    protected getFixedLanguage(lang: langCodeWithAuto): string;
}
/**
 * Translator implementation which use Google API with token from https://translate.google.com
 */
export declare class GoogleTranslator extends AbstractGoogleTranslator {
    static readonly translatorName = "GoogleTranslator";
    checkLimitExceeding(text: string | string[]): number;
    translate(text: string, from: langCodeWithAuto, to: langCode): Promise<string>;
    translateBatch(text: string[], from: langCodeWithAuto, to: langCode): Promise<string[]>;
    private encodeForBatch;
}
/**
 * Translator implementation which use Google API without token
 */
export declare class GoogleTranslatorTokenFree extends AbstractGoogleTranslator {
    static readonly translatorName = "GoogleTranslatorTokenFree";
    translate: (text: string, from: langCodeWithAuto, to: langCode) => Promise<string>;
    translateBatch(text: string[], from: langCodeWithAuto, to: langCode): Promise<string[]>;
}
