"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getYandexSID = getYandexSID;
var _axios = _interopRequireDefault(require("axios"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// Source: https://github.com/FilipePS/Traduzir-paginas-web/blob/f3a4956a1aa96b7a9124864158a5200827694521/background/translationService.js

var lastYandexRequestSIDTime = null;
var yandexTranslateSID = null;
var yandexSIDNotFound = false;
function getYandexSID() {
  return new Promise(function (resolve) {
    var updateYandexSid = false;
    if (lastYandexRequestSIDTime) {
      var date = new Date();
      if (yandexTranslateSID) {
        date.setHours(date.getHours() - 12);
      } else if (yandexSIDNotFound) {
        date.setMinutes(date.getMinutes() - 30);
      } else {
        date.setMinutes(date.getMinutes() - 2);
      }
      if (date.getTime() > lastYandexRequestSIDTime) {
        updateYandexSid = true;
      }
    } else {
      updateYandexSid = true;
    }
    if (updateYandexSid) {
      lastYandexRequestSIDTime = Date.now();
      var url = 'https://translate.yandex.net/website-widget/v1/widget.js?widgetId=ytWidget&pageLang=es&widgetTheme=light&autoMode=false';
      _axios.default.get(url).then(function (response) {
        var result = (typeof response.data === 'string' ? response.data : '').match(/sid\:\s\'[0-9a-f\.]+/);
        if (result && result[0] && result[0].length > 7) {
          yandexTranslateSID = result[0].substring(6);
          yandexSIDNotFound = false;
        } else {
          yandexSIDNotFound = true;
        }
        resolve();
      }).catch(function (error) {
        console.error(error);
        resolve();
      });
    } else {
      resolve();
    }
  }).then(function () {
    return yandexTranslateSID;
  });
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRvcnMvWWFuZGV4VHJhbnNsYXRvci9nZXRZYW5kZXhTSUQuanMiLCJuYW1lcyI6WyJfYXhpb3MiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwibGFzdFlhbmRleFJlcXVlc3RTSURUaW1lIiwieWFuZGV4VHJhbnNsYXRlU0lEIiwieWFuZGV4U0lETm90Rm91bmQiLCJnZXRZYW5kZXhTSUQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInVwZGF0ZVlhbmRleFNpZCIsImRhdGUiLCJEYXRlIiwic2V0SG91cnMiLCJnZXRIb3VycyIsInNldE1pbnV0ZXMiLCJnZXRNaW51dGVzIiwiZ2V0VGltZSIsIm5vdyIsInVybCIsImF4aW9zIiwiZ2V0IiwidGhlbiIsInJlc3BvbnNlIiwicmVzdWx0IiwiZGF0YSIsIm1hdGNoIiwibGVuZ3RoIiwic3Vic3RyaW5nIiwiY2F0Y2giLCJlcnJvciIsImNvbnNvbGUiXSwic291cmNlcyI6WyJ0cmFuc2xhdG9ycy9ZYW5kZXhUcmFuc2xhdG9yL2dldFlhbmRleFNJRC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTb3VyY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9GaWxpcGVQUy9UcmFkdXppci1wYWdpbmFzLXdlYi9ibG9iL2YzYTQ5NTZhMWFhOTZiN2E5MTI0ODY0MTU4YTUyMDA4Mjc2OTQ1MjEvYmFja2dyb3VuZC90cmFuc2xhdGlvblNlcnZpY2UuanNcblxuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcblxubGV0IGxhc3RZYW5kZXhSZXF1ZXN0U0lEVGltZTogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG5sZXQgeWFuZGV4VHJhbnNsYXRlU0lEOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbmxldCB5YW5kZXhTSUROb3RGb3VuZDogYm9vbGVhbiA9IGZhbHNlO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0WWFuZGV4U0lEKCkge1xuXHRyZXR1cm4gbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUpID0+IHtcblx0XHRsZXQgdXBkYXRlWWFuZGV4U2lkID0gZmFsc2U7XG5cdFx0aWYgKGxhc3RZYW5kZXhSZXF1ZXN0U0lEVGltZSkge1xuXHRcdFx0Y29uc3QgZGF0ZSA9IG5ldyBEYXRlKCk7XG5cdFx0XHRpZiAoeWFuZGV4VHJhbnNsYXRlU0lEKSB7XG5cdFx0XHRcdGRhdGUuc2V0SG91cnMoZGF0ZS5nZXRIb3VycygpIC0gMTIpO1xuXHRcdFx0fSBlbHNlIGlmICh5YW5kZXhTSUROb3RGb3VuZCkge1xuXHRcdFx0XHRkYXRlLnNldE1pbnV0ZXMoZGF0ZS5nZXRNaW51dGVzKCkgLSAzMCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRlLnNldE1pbnV0ZXMoZGF0ZS5nZXRNaW51dGVzKCkgLSAyKTtcblx0XHRcdH1cblx0XHRcdGlmIChkYXRlLmdldFRpbWUoKSA+IGxhc3RZYW5kZXhSZXF1ZXN0U0lEVGltZSkge1xuXHRcdFx0XHR1cGRhdGVZYW5kZXhTaWQgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR1cGRhdGVZYW5kZXhTaWQgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICh1cGRhdGVZYW5kZXhTaWQpIHtcblx0XHRcdGxhc3RZYW5kZXhSZXF1ZXN0U0lEVGltZSA9IERhdGUubm93KCk7XG5cdFx0XHRjb25zdCB1cmwgPVxuXHRcdFx0XHQnaHR0cHM6Ly90cmFuc2xhdGUueWFuZGV4Lm5ldC93ZWJzaXRlLXdpZGdldC92MS93aWRnZXQuanM/d2lkZ2V0SWQ9eXRXaWRnZXQmcGFnZUxhbmc9ZXMmd2lkZ2V0VGhlbWU9bGlnaHQmYXV0b01vZGU9ZmFsc2UnO1xuXG5cdFx0XHRheGlvc1xuXHRcdFx0XHQuZ2V0KHVybClcblx0XHRcdFx0LnRoZW4oKHJlc3BvbnNlKSA9PiB7XG5cdFx0XHRcdFx0Y29uc3QgcmVzdWx0ID0gKFxuXHRcdFx0XHRcdFx0dHlwZW9mIHJlc3BvbnNlLmRhdGEgPT09ICdzdHJpbmcnID8gcmVzcG9uc2UuZGF0YSA6ICcnXG5cdFx0XHRcdFx0KS5tYXRjaCgvc2lkXFw6XFxzXFwnWzAtOWEtZlxcLl0rLyk7XG5cblx0XHRcdFx0XHRpZiAocmVzdWx0ICYmIHJlc3VsdFswXSAmJiByZXN1bHRbMF0ubGVuZ3RoID4gNykge1xuXHRcdFx0XHRcdFx0eWFuZGV4VHJhbnNsYXRlU0lEID0gcmVzdWx0WzBdLnN1YnN0cmluZyg2KTtcblx0XHRcdFx0XHRcdHlhbmRleFNJRE5vdEZvdW5kID0gZmFsc2U7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHlhbmRleFNJRE5vdEZvdW5kID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXNvbHZlKCk7XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5jYXRjaCgoZXJyb3IpID0+IHtcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKGVycm9yKTtcblx0XHRcdFx0XHRyZXNvbHZlKCk7XG5cdFx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXNvbHZlKCk7XG5cdFx0fVxuXHR9KS50aGVuKCgpID0+IHlhbmRleFRyYW5zbGF0ZVNJRCk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUVBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUEwQixTQUFBRCx1QkFBQUUsR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLEtBQUFFLE9BQUEsRUFBQUYsR0FBQTtBQUYxQjs7QUFJQSxJQUFJRyx3QkFBd0IsR0FBa0IsSUFBSTtBQUNsRCxJQUFJQyxrQkFBa0IsR0FBa0IsSUFBSTtBQUM1QyxJQUFJQyxpQkFBaUIsR0FBWSxLQUFLO0FBRWhDLFNBQVVDLFlBQVlBLENBQUE7RUFDM0IsT0FBTyxJQUFJQyxPQUFPLENBQU8sVUFBQ0MsT0FBTztJQUNoQyxJQUFJQyxlQUFlLEdBQUcsS0FBSztJQUMzQixJQUFJTix3QkFBd0IsRUFBRTtNQUM3QixJQUFNTyxJQUFJLEdBQUcsSUFBSUMsSUFBSSxFQUFFO01BQ3ZCLElBQUlQLGtCQUFrQixFQUFFO1FBQ3ZCTSxJQUFJLENBQUNFLFFBQVEsQ0FBQ0YsSUFBSSxDQUFDRyxRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUM7T0FDbkMsTUFBTSxJQUFJUixpQkFBaUIsRUFBRTtRQUM3QkssSUFBSSxDQUFDSSxVQUFVLENBQUNKLElBQUksQ0FBQ0ssVUFBVSxFQUFFLEdBQUcsRUFBRSxDQUFDO09BQ3ZDLE1BQU07UUFDTkwsSUFBSSxDQUFDSSxVQUFVLENBQUNKLElBQUksQ0FBQ0ssVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDOztNQUV2QyxJQUFJTCxJQUFJLENBQUNNLE9BQU8sRUFBRSxHQUFHYix3QkFBd0IsRUFBRTtRQUM5Q00sZUFBZSxHQUFHLElBQUk7O0tBRXZCLE1BQU07TUFDTkEsZUFBZSxHQUFHLElBQUk7O0lBR3ZCLElBQUlBLGVBQWUsRUFBRTtNQUNwQk4sd0JBQXdCLEdBQUdRLElBQUksQ0FBQ00sR0FBRyxFQUFFO01BQ3JDLElBQU1DLEdBQUcsR0FDUix5SEFBeUg7TUFFMUhDLGNBQUssQ0FDSEMsR0FBRyxDQUFDRixHQUFHLENBQUMsQ0FDUkcsSUFBSSxDQUFDLFVBQUNDLFFBQVE7UUFDZCxJQUFNQyxNQUFNLEdBQUcsQ0FDZCxPQUFPRCxRQUFRLENBQUNFLElBQUksS0FBSyxRQUFRLEdBQUdGLFFBQVEsQ0FBQ0UsSUFBSSxHQUFHLEVBQUUsRUFDckRDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQztRQUUvQixJQUFJRixNQUFNLElBQUlBLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDRyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1VBQ2hEdEIsa0JBQWtCLEdBQUdtQixNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUNJLFNBQVMsQ0FBQyxDQUFDLENBQUM7VUFDM0N0QixpQkFBaUIsR0FBRyxLQUFLO1NBQ3pCLE1BQU07VUFDTkEsaUJBQWlCLEdBQUcsSUFBSTs7UUFHekJHLE9BQU8sRUFBRTtNQUNWLENBQUMsQ0FBQyxDQUNEb0IsS0FBSyxDQUFDLFVBQUNDLEtBQUs7UUFDWkMsT0FBTyxDQUFDRCxLQUFLLENBQUNBLEtBQUssQ0FBQztRQUNwQnJCLE9BQU8sRUFBRTtNQUNWLENBQUMsQ0FBQztLQUNILE1BQU07TUFDTkEsT0FBTyxFQUFFOztFQUVYLENBQUMsQ0FBQyxDQUFDYSxJQUFJLENBQUM7SUFBTSxPQUFBakIsa0JBQWtCO0VBQWxCLENBQWtCLENBQUM7QUFDbEMifQ==
