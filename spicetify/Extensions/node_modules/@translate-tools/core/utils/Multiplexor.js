"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Multiplexor = void 0;
/**
 * Util for pack multiple requests to one
 *
 * It's just encode/decode all texts with custom separation options
 */
var Multiplexor = /** @class */function () {
  // private readonly token: Array<Array<string>> = [];
  function Multiplexor(options) {
    this.options = {
      tokenStart: '<',
      tokenEnd: '>',
      tokenClose: '/'
    };
    if (options !== undefined) {
      ['tokenStart', 'tokenEnd', 'tokenClose'].forEach(function (key) {
        var item = options[key];
        if (item !== undefined && item.search(/\&|\:/) !== -1) {
          throw new Error("Option ".concat(key, " has disallow characters (& or :)"));
        }
      });
      for (var key in options) {
        this.options[key] = options[key];
      }
    }
  }
  Multiplexor.prototype.encode = function (data) {
    var _this = this;
    var _a = this.options,
      _b = _a.tokenStart,
      start = _b === void 0 ? '' : _b,
      _c = _a.tokenEnd,
      end = _c === void 0 ? '' : _c,
      _d = _a.tokenClose,
      close = _d === void 0 ? '' : _d;
    return data.map(function (_a) {
      var id = _a.id,
        text = _a.text;
      return start + id + end + _this.escape(text) + start + close + id + end;
    }).join(' ');
  };
  Multiplexor.prototype.decode = function (text) {
    var _a = this.options,
      _b = _a.tokenStart,
      start = _b === void 0 ? '' : _b,
      _c = _a.tokenEnd,
      end = _c === void 0 ? '' : _c,
      _d = _a.tokenClose,
      close = _d === void 0 ? '' : _d;
    var pattern = "".concat(start, "\\s*(\\d+)\\s*").concat(end, "([\\w\\W]+?)").concat(start, "\\s*").concat(close, "\\s*\\1\\s*").concat(end);
    var matchSet = text.matchAll(new RegExp(pattern, 'gm'));
    var result = [];
    var match = matchSet.next();
    while (!match.done) {
      result.push({
        id: match.value[1],
        text: this.unescape(match.value[2])
      });
      match = matchSet.next();
    }
    return result;
  };
  Multiplexor.prototype.escape = function (text) {
    var _this = this;
    ['tokenStart', 'tokenEnd', 'tokenClose'].forEach(function (key, index) {
      var token = _this.options[key];
      if (token.length > 0) {
        text = text.replace(new RegExp(_this.escapeRegExp(token), 'g'), "&".concat(index + 1, ":"));
      }
    });
    return text;
  };
  Multiplexor.prototype.unescape = function (text) {
    var _this = this;
    ['tokenStart', 'tokenEnd', 'tokenClose'].forEach(function (key, index) {
      var token = _this.options[key];
      if (token.length > 0) {
        text = text.replace(new RegExp("&".concat(index + 1, ":"), 'g'), token);
      }
    });
    return text;
  };
  Multiplexor.prototype.escapeRegExp = function (text) {
    return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
  };
  return Multiplexor;
}();
exports.Multiplexor = Multiplexor;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMvTXVsdGlwbGV4b3IuanMiLCJuYW1lcyI6WyJNdWx0aXBsZXhvciIsIm9wdGlvbnMiLCJ0b2tlblN0YXJ0IiwidG9rZW5FbmQiLCJ0b2tlbkNsb3NlIiwidW5kZWZpbmVkIiwiZm9yRWFjaCIsImtleSIsIml0ZW0iLCJzZWFyY2giLCJFcnJvciIsImNvbmNhdCIsInByb3RvdHlwZSIsImVuY29kZSIsImRhdGEiLCJfdGhpcyIsIl9hIiwiX2IiLCJzdGFydCIsIl9jIiwiZW5kIiwiX2QiLCJjbG9zZSIsIm1hcCIsImlkIiwidGV4dCIsImVzY2FwZSIsImpvaW4iLCJkZWNvZGUiLCJwYXR0ZXJuIiwibWF0Y2hTZXQiLCJtYXRjaEFsbCIsIlJlZ0V4cCIsInJlc3VsdCIsIm1hdGNoIiwibmV4dCIsImRvbmUiLCJwdXNoIiwidmFsdWUiLCJ1bmVzY2FwZSIsImluZGV4IiwidG9rZW4iLCJsZW5ndGgiLCJyZXBsYWNlIiwiZXNjYXBlUmVnRXhwIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInV0aWxzL011bHRpcGxleG9yLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImludGVyZmFjZSBPcHRpb25zIHtcblx0dG9rZW5TdGFydD86IHN0cmluZztcblx0dG9rZW5FbmQ/OiBzdHJpbmc7XG5cdHRva2VuQ2xvc2U/OiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBUZXh0Q29udGFpbmVyIHtcblx0aWQ6IHN0cmluZztcblx0dGV4dDogc3RyaW5nO1xufVxuXG4vKipcbiAqIFV0aWwgZm9yIHBhY2sgbXVsdGlwbGUgcmVxdWVzdHMgdG8gb25lXG4gKlxuICogSXQncyBqdXN0IGVuY29kZS9kZWNvZGUgYWxsIHRleHRzIHdpdGggY3VzdG9tIHNlcGFyYXRpb24gb3B0aW9uc1xuICovXG5leHBvcnQgY2xhc3MgTXVsdGlwbGV4b3Ige1xuXHRwcml2YXRlIHJlYWRvbmx5IG9wdGlvbnM6IE9wdGlvbnMgPSB7XG5cdFx0dG9rZW5TdGFydDogJzwnLFxuXHRcdHRva2VuRW5kOiAnPicsXG5cdFx0dG9rZW5DbG9zZTogJy8nLFxuXHR9O1xuXG5cdC8vIHByaXZhdGUgcmVhZG9ubHkgdG9rZW46IEFycmF5PEFycmF5PHN0cmluZz4+ID0gW107XG5cdGNvbnN0cnVjdG9yKG9wdGlvbnM/OiBPcHRpb25zKSB7XG5cdFx0aWYgKG9wdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0Wyd0b2tlblN0YXJ0JywgJ3Rva2VuRW5kJywgJ3Rva2VuQ2xvc2UnXS5mb3JFYWNoKChrZXkpID0+IHtcblx0XHRcdFx0Y29uc3QgaXRlbSA9IChvcHRpb25zIGFzIGFueSlba2V5XTtcblx0XHRcdFx0aWYgKGl0ZW0gIT09IHVuZGVmaW5lZCAmJiBpdGVtLnNlYXJjaCgvXFwmfFxcOi8pICE9PSAtMSkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihgT3B0aW9uICR7a2V5fSBoYXMgZGlzYWxsb3cgY2hhcmFjdGVycyAoJiBvciA6KWApO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0Zm9yIChjb25zdCBrZXkgaW4gb3B0aW9ucykge1xuXHRcdFx0XHQodGhpcy5vcHRpb25zIGFzIGFueSlba2V5XSA9IChvcHRpb25zIGFzIGFueSlba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgZW5jb2RlKGRhdGE6IFRleHRDb250YWluZXJbXSkge1xuXHRcdGNvbnN0IHtcblx0XHRcdHRva2VuU3RhcnQ6IHN0YXJ0ID0gJycsXG5cdFx0XHR0b2tlbkVuZDogZW5kID0gJycsXG5cdFx0XHR0b2tlbkNsb3NlOiBjbG9zZSA9ICcnLFxuXHRcdH0gPSB0aGlzLm9wdGlvbnM7XG5cblx0XHRyZXR1cm4gZGF0YVxuXHRcdFx0Lm1hcChcblx0XHRcdFx0KHsgaWQsIHRleHQgfSkgPT5cblx0XHRcdFx0XHRzdGFydCArIGlkICsgZW5kICsgdGhpcy5lc2NhcGUodGV4dCkgKyBzdGFydCArIGNsb3NlICsgaWQgKyBlbmQsXG5cdFx0XHQpXG5cdFx0XHQuam9pbignICcpO1xuXHR9XG5cblx0cHVibGljIGRlY29kZSh0ZXh0OiBzdHJpbmcpIHtcblx0XHRjb25zdCB7XG5cdFx0XHR0b2tlblN0YXJ0OiBzdGFydCA9ICcnLFxuXHRcdFx0dG9rZW5FbmQ6IGVuZCA9ICcnLFxuXHRcdFx0dG9rZW5DbG9zZTogY2xvc2UgPSAnJyxcblx0XHR9ID0gdGhpcy5vcHRpb25zO1xuXG5cdFx0Y29uc3QgcGF0dGVybiA9IGAke3N0YXJ0fVxcXFxzKihcXFxcZCspXFxcXHMqJHtlbmR9KFtcXFxcd1xcXFxXXSs/KSR7c3RhcnR9XFxcXHMqJHtjbG9zZX1cXFxccypcXFxcMVxcXFxzKiR7ZW5kfWA7XG5cdFx0Y29uc3QgbWF0Y2hTZXQgPSB0ZXh0Lm1hdGNoQWxsKG5ldyBSZWdFeHAocGF0dGVybiwgJ2dtJykpO1xuXG5cdFx0Y29uc3QgcmVzdWx0ID0gW107XG5cdFx0bGV0IG1hdGNoID0gbWF0Y2hTZXQubmV4dCgpO1xuXHRcdHdoaWxlICghbWF0Y2guZG9uZSkge1xuXHRcdFx0cmVzdWx0LnB1c2goe1xuXHRcdFx0XHRpZDogbWF0Y2gudmFsdWVbMV0sXG5cdFx0XHRcdHRleHQ6IHRoaXMudW5lc2NhcGUobWF0Y2gudmFsdWVbMl0pLFxuXHRcdFx0fSk7XG5cdFx0XHRtYXRjaCA9IG1hdGNoU2V0Lm5leHQoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0cHJpdmF0ZSBlc2NhcGUodGV4dDogc3RyaW5nKSB7XG5cdFx0Wyd0b2tlblN0YXJ0JywgJ3Rva2VuRW5kJywgJ3Rva2VuQ2xvc2UnXS5mb3JFYWNoKChrZXksIGluZGV4KSA9PiB7XG5cdFx0XHRjb25zdCB0b2tlbiA9ICh0aGlzLm9wdGlvbnMgYXMgYW55KVtrZXldO1xuXHRcdFx0aWYgKHRva2VuLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZShcblx0XHRcdFx0XHRuZXcgUmVnRXhwKHRoaXMuZXNjYXBlUmVnRXhwKHRva2VuKSwgJ2cnKSxcblx0XHRcdFx0XHRgJiR7aW5kZXggKyAxfTpgLFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIHRleHQ7XG5cdH1cblxuXHRwcml2YXRlIHVuZXNjYXBlKHRleHQ6IHN0cmluZykge1xuXHRcdFsndG9rZW5TdGFydCcsICd0b2tlbkVuZCcsICd0b2tlbkNsb3NlJ10uZm9yRWFjaCgoa2V5LCBpbmRleCkgPT4ge1xuXHRcdFx0Y29uc3QgdG9rZW4gPSAodGhpcy5vcHRpb25zIGFzIGFueSlba2V5XTtcblx0XHRcdGlmICh0b2tlbi5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UobmV3IFJlZ0V4cChgJiR7aW5kZXggKyAxfTpgLCAnZycpLCB0b2tlbik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gdGV4dDtcblx0fVxuXG5cdHByaXZhdGUgZXNjYXBlUmVnRXhwKHRleHQ6IHN0cmluZykge1xuXHRcdHJldHVybiB0ZXh0LnJlcGxhY2UoL1stW1xcXXt9KCkqKz8uLFxcXFxeJHwjXFxzXS9nLCAnXFxcXCQmJyk7XG5cdH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBV0E7Ozs7O0FBS0EsSUFBQUEsV0FBQTtFQU9DO0VBQ0EsU0FBQUEsWUFBWUMsT0FBaUI7SUFQWixLQUFBQSxPQUFPLEdBQVk7TUFDbkNDLFVBQVUsRUFBRSxHQUFHO01BQ2ZDLFFBQVEsRUFBRSxHQUFHO01BQ2JDLFVBQVUsRUFBRTtLQUNaO0lBSUEsSUFBSUgsT0FBTyxLQUFLSSxTQUFTLEVBQUU7TUFDMUIsQ0FBQyxZQUFZLEVBQUUsVUFBVSxFQUFFLFlBQVksQ0FBQyxDQUFDQyxPQUFPLENBQUMsVUFBQ0MsR0FBRztRQUNwRCxJQUFNQyxJQUFJLEdBQUlQLE9BQWUsQ0FBQ00sR0FBRyxDQUFDO1FBQ2xDLElBQUlDLElBQUksS0FBS0gsU0FBUyxJQUFJRyxJQUFJLENBQUNDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtVQUN0RCxNQUFNLElBQUlDLEtBQUssQ0FBQyxV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
